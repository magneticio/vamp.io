<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation overview on Vamp | Automation and Controls for Enterprise Devops</title>
    <link>https://vamp.io/documentation/</link>
    <description>Recent content in Documentation overview on Vamp | Automation and Controls for Enterprise Devops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jul 2017 09:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vamp.io/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vamp and Kubernetes</title>
      <link>https://vamp.io/documentation/how-vamp-works/v1.0.0/vamp-and-kubernetes/</link>
      <pubDate>Fri, 07 Sep 2018 21:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v1.0.0/vamp-and-kubernetes/</guid>
      <description>There is a strong synergy between Vamp artifacts such as Environments, Deployments and Gateways, and the corresponding Kubernetes constructs but the terminology can be confusing.
Vamp tenant environments Vamp implements multi-tenancy using a two-level namespace model. A tenant has exactly one organisation namespace plus one or more environment namespaces.
Kubernetes Namespaces are a logical construct which can be use as a way to divide cluster resources between multiple users.</description>
    </item>
    
    <item>
      <title>Vamp Enterprise Edition Trial for DC/OS</title>
      <link>https://vamp.io/documentation/installation/v1.0.0/dcos-lifter-eval-spec/</link>
      <pubDate>Fri, 31 Aug 2018 14:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v1.0.0/dcos-lifter-eval-spec/</guid>
      <description>Vamp Enterprise for DC/OS
Thank you for your interest in Vamp Enterprise! To start using Vamp Enterprise you need to setup and configure some dependencies and environments. To make this really easy we&amp;rsquo;ve created Vamp Lifter, our setup and configuration tool. You can read more about Vamp components, including Lifter here.
 If you’re new to Vamp Enterprise Edition and you want a quick way to evaluate it, copy the Vamp Lifter application specification below and save it as file named lifter-standalone.</description>
    </item>
    
    <item>
      <title>Vamp Enterprise Edition Trial for Kubernetes</title>
      <link>https://vamp.io/documentation/installation/v1.0.0/kubernetes-lifter-eval-spec/</link>
      <pubDate>Fri, 31 Aug 2018 14:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v1.0.0/kubernetes-lifter-eval-spec/</guid>
      <description>Vamp Enterprise for Kubernetes
Thank you for your interest in Vamp Enterprise! To start using Vamp Enterprise you need to setup and configure some dependencies and environments. To make this really easy we&amp;rsquo;ve created Vamp Lifter, our setup and configuration tool. You can read more about Vamp components, including Lifter here.
 If you’re new to Vamp Enterprise Edition and you want a quick way to evaluate it, copy the Vamp Lifter application specification below and save it as file named lifter-standalone.</description>
    </item>
    
    <item>
      <title>Create a Tenant</title>
      <link>https://vamp.io/documentation/configure/v1.0.0/configure-tenant/</link>
      <pubDate>Sat, 11 Aug 2018 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v1.0.0/configure-tenant/</guid>
      <description>Tenants can be different teams within a business division, different business divisions inside the same organization, or entirely different organizations. Each tenant&amp;rsquo;s data is isolated and remains invisible to other tenants.
Using the Vamp Lifter UI Kubernetes Open the Vamp Lifter UI in your web browser. Details of how to access the Vamp Lifter UI using kubectl can be found in the in the Vamp EE Kubernetes quickstart.
DC/OS In the DC/OS UI, click the icon next to the vamp-ee-lifter service name to open the Vamp Lifter UI in a new window Create a tenant organization The organization namespace holds configuration that is common to all environments such as password salts, users and roles.</description>
    </item>
    
    <item>
      <title>Configure MySQL</title>
      <link>https://vamp.io/documentation/configure/v1.0.0/configure-database/</link>
      <pubDate>Mon, 06 Aug 2018 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v1.0.0/configure-database/</guid>
      <description>Vamp uses a relational database to persist the definitions and current states of the services, gateways and workflows. This database is also used to store the user role definitions and users.
Vamp recommends using MySQL as the relational database. Though it’s possible to use PostgreSQL or Microsoft SQL server, we don’t recommend it, and if you get stuck we’re going to suggest that you to use MySQL.
Vamp has been tested with:</description>
    </item>
    
    <item>
      <title>Dialects</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/dialects/</link>
      <pubDate>Mon, 03 Apr 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/dialects/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   A dialect is a set of native commands for the underlying container platform. Vamp allows you to use container driver specific tags in workflows and inside blueprints on a breed or deployment level. Dialects effectively enable you to make full use of, for instance, the underlying features like mounting disks, settings commands and providing access to private Docker registries.</description>
    </item>
    
    <item>
      <title>Dialects</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/dialects/</link>
      <pubDate>Mon, 03 Apr 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/dialects/</guid>
      <description>A dialect is a set of native commands for the underlying container platform. Vamp allows you to use container driver specific tags in workflows and inside blueprints on a breed or deployment level. Dialects effectively enable you to make full use of, for instance, the underlying features like mounting disks, settings commands and providing access to private Docker registries.
Dialects can be used by adding the dialects tag, followed by the preferred dialect:</description>
    </item>
    
    <item>
      <title>Dialects</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/dialects/</link>
      <pubDate>Mon, 03 Apr 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/dialects/</guid>
      <description>A dialect is a set of native commands for the underlying container platform. Vamp allows you to use container driver specific tags in workflows and inside blueprints on a breed or deployment level. Dialects effectively enable you to make full use of, for instance, the underlying features like mounting disks, settings commands and providing access to private Docker registries.
Dialects can be used by adding the dialects tag, followed by the preferred dialect:</description>
    </item>
    
    <item>
      <title>Version 0.9.4</title>
      <link>https://vamp.io/documentation/release-notes/version-0-9-4/</link>
      <pubDate>Tue, 14 Mar 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/version-0-9-4/</guid>
      <description>14 April 2017 The Vamp 0.9.4 release marks the beginning of a new level of sophistication and maturity of the Vamp system. It shows the first features of our longer term vision on what Vamp can be and deliver. One of the most powerful additions is the addition of a Vamp controlled &amp;ldquo;reverse proxy&amp;rdquo; functionality. This enables powerful new features like showing logs of running container instances, showing the contents of the containers itself, and exposing event-logs from all the Vamp workflows, all directly within the Vamp UI.</description>
    </item>
    
    <item>
      <title>Version 0.9.5</title>
      <link>https://vamp.io/documentation/release-notes/version-0-9-5/</link>
      <pubDate>Tue, 14 Mar 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/version-0-9-5/</guid>
      <description>June 2017 The 095 release of Vamp is focused on increasing stability, scalability and performance. An important new feature is support for SQL databases for storing persistence data. This also enables us to deliver powerful (enterprise) multi-tenancy features. We&amp;rsquo;ve also added support for multiple Zookeeper nodes and upgraded HAProxy.
What is new  SQL persistence - (#950)  Mysql persistence - vamp-mysql Postgres persistence - vamp-postgres SQLServer persistence - vamp-sqlserver  Support for multiple zookeeper nodes  VAMP - #956 workflow-agent - #956 gateway-agent - #39  Docker-compose bugfixes - #945 Upgrade HAProxy to 1.</description>
    </item>
    
    <item>
      <title>Version 0.9.3</title>
      <link>https://vamp.io/documentation/release-notes/version-0-9-3/</link>
      <pubDate>Tue, 14 Feb 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/version-0-9-3/</guid>
      <description>14th February 2017
This Vamp 093 release delivers powerful new features and improvements on both the UI, backend and architectural aspects of the system. Noticeable improvements are the redesigned UI with better support for larger deployments and lists due to a new list view and &amp;ldquo;as you type&amp;rdquo; search/filter. We moved the menu to the vertical left for better use of screen real-estate. We&amp;rsquo;ve added admin features to the UI to display logging, hot reloading of configurations and displaying the several layers of configurations.</description>
    </item>
    
    <item>
      <title>DC/OS</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/dcos/</link>
      <pubDate>Tue, 07 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/dcos/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   There are different ways to install Vamp on DC.OS. On this page we start out with the most common setup, but if you are interested in doing a custom install or working with public and private nodes you should jump to that section.</description>
    </item>
    
    <item>
      <title>DC/OS</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/dcos/</link>
      <pubDate>Tue, 07 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/dcos/</guid>
      <description>There are different ways to install Vamp on DC.OS. On this page we start out with the most common setup, but if you are interested in doing a custom install or working with public and private nodes you should jump to that section.
 Universe package Manual install Custom install Public and private nodes  Universe package Vamp is available in the DC/OS Universe. Navigate to Universe in the DC/OS UI and search for Vamp and click &amp;ldquo;Install Package&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>DC/OS 1.7 and 1.8</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/dcos/</link>
      <pubDate>Tue, 07 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/dcos/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   There are different ways to install Vamp on DC.OS. On this page we start out with the most common setup, but if you are interested in doing a custom install or working with public and private nodes you should jump to that section.</description>
    </item>
    
    <item>
      <title>DC/OS Quickstart</title>
      <link>https://vamp.io/documentation/installation/v1.0.0/dcos/</link>
      <pubDate>Tue, 07 Feb 2017 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v1.0.0/dcos/</guid>
      <description>This section describes how to quickly install Vamp 1.0 on DC/OS so you can evaluate it. The installation uses an installer built into the Vamp Lifter application to bootstrap a full Vamp installation.
After a successful installation, you will be able to login to Vamp EE as an admin user and deploy services.
Note!
Do not run this default installation in production! It does not include persistent storage and makes use of a Hashicorp Vault &amp;lsquo;dev&amp;rsquo; server.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.2/overview/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.2/overview/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Troubleshoot and resolve common issues in case Vamp is not running or not behaving as expected.
 Troubleshoot a full Vamp installation Troubleshoot the Vamp hello world quickstart Troubleshooting tips for using Vamp  If you find some of the instructions not clear enough or lacking information, please raise an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.3/overview/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.3/overview/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Troubleshoot and resolve common issues in case Vamp is not running or not behaving as expected.
 Troubleshoot a full Vamp installation Troubleshoot the Vamp hello world quickstart Troubleshooting tips for using Vamp  If you find some of the instructions not clear enough or lacking information, please raise an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.4/overview/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.4/overview/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Troubleshoot and resolve common issues in case Vamp is not running or not behaving as expected.
 Troubleshoot a full Vamp installation Troubleshoot the Vamp hello world quickstart Troubleshooting tips for using Vamp  If you find some of the instructions not clear enough or lacking information, please raise an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.5/overview/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.5/overview/</guid>
      <description>Troubleshoot and resolve common issues in case Vamp is not running or not behaving as expected.
 Troubleshoot a full Vamp installation Troubleshoot the Vamp hello world quickstart Troubleshooting tips for using Vamp  If you find some of the instructions not clear enough or lacking information, please raise an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Troubleshoot -  full Vamp installation</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.2/full-vamp-installation/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.2/full-vamp-installation/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first The steps below will help you debug problems encountered when following our full install instructions.
 Check the Vamp components Check Elasticsearch Check the key value store Check the Vamp workflows  Check the Vamp components  Check the step by step instructions for your container scheduler DC/OS, Mesos/Marathon, Kubernetes, Rancher or Docker.</description>
    </item>
    
    <item>
      <title>Troubleshoot - full Vamp installation</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.3/full-vamp-installation/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.3/full-vamp-installation/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first The steps below will help you debug problems encountered when following our full install instructions.
 Check the Vamp components Check Elasticsearch Check the key value store Check the Vamp workflows  Check the Vamp components  Check the step by step instructions for your container scheduler DC/OS, Mesos/Marathon, Kubernetes, Rancher or Docker.</description>
    </item>
    
    <item>
      <title>Troubleshoot - full Vamp installation</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.4/full-vamp-installation/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.4/full-vamp-installation/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first The steps below will help you debug problems encountered when following our full install instructions.
 Check the Vamp components Check Elasticsearch Check the key value store Check the Vamp workflows  Check the Vamp components  Check the step by step instructions for your container scheduler DC/OS, Mesos/Marathon, Kubernetes, Rancher or Docker.</description>
    </item>
    
    <item>
      <title>Troubleshoot - full Vamp installation</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.5/full-vamp-installation/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.5/full-vamp-installation/</guid>
      <description>Try this first The steps below will help you debug problems encountered when following our full install instructions.
 Check the Vamp components Check Elasticsearch Check the key value store Check the Vamp workflows  Check the Vamp components  Check the step by step instructions for your container scheduler DC/OS, Mesos/Marathon, Kubernetes, Rancher or Docker. Check the information panel in the Vamp UI (click the i-icon in the top right corner, or check Extended info under Admin).</description>
    </item>
    
    <item>
      <title>Troubleshoot - hello world quickstart</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.2/hello-world-quickstart/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.2/hello-world-quickstart/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first The Vamp hello world quickstart is a self contained testing package. If you run into problems or unexpected behaviour, we advise that you clear everything out and reinstall.
 Stop all running containers - for example using docker ps | awk &#39;{print $1}&#39; | xargs docker stop 2&amp;gt;/dev/null Clean up your docker environment (remove stopped containers, dangling images and volumes).</description>
    </item>
    
    <item>
      <title>Troubleshoot - hello world quickstart</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.3/hello-world-quickstart/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.3/hello-world-quickstart/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first The Vamp hello world quickstart is a self contained testing package. If you run into problems or unexpected behaviour, we advise that you clear everything out and reinstall.
 Stop all running containers - for example using docker ps | awk &#39;{print $1}&#39; | xargs docker stop 2&amp;gt;/dev/null Clean up your docker environment (remove stopped containers, dangling images and volumes).</description>
    </item>
    
    <item>
      <title>Troubleshoot - hello world quickstart</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.4/hello-world-quickstart/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.4/hello-world-quickstart/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first The Vamp hello world quickstart is a self contained testing package. If you run into problems or unexpected behaviour, we advise that you clear everything out and reinstall.
 Stop all running containers - for example using docker stop $( docker ps --quiet ) The Docker machine should have access to at least 3GB memory, make sure this has been set correctly.</description>
    </item>
    
    <item>
      <title>Troubleshoot - hello world quickstart</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.5/hello-world-quickstart/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.5/hello-world-quickstart/</guid>
      <description>Try this first The Vamp hello world quickstart is a self contained testing package. If you run into problems or unexpected behaviour, we advise that you clear everything out and reinstall.
 Stop all running containers - for example using docker stop $( docker ps --quiet ) The Docker machine should have access to at least 3GB memory, make sure this has been set correctly. Clean up your docker environment (remove stopped containers, dangling images and volumes).</description>
    </item>
    
    <item>
      <title>Troubleshoot - tips for using Vamp</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.2/tips-for-using-vamp/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.2/tips-for-using-vamp/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first If you encounter problems running services on an installed version of Vamp, check the following:
 Confirm that everything is installed ok:  Check the Vamp info (using GET &amp;lt;vamp url&amp;gt;/api/v1/info or in the info pane of the Vamp UI).</description>
    </item>
    
    <item>
      <title>Troubleshoot - tips for using Vamp</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.3/tips-for-using-vamp/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.3/tips-for-using-vamp/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first If you encounter problems running services on an installed version of Vamp, check the following:
 Confirm that everything is installed ok:  Check the Vamp info (using GET &amp;lt;vamp url&amp;gt;/api/v1/info or in the info pane of the Vamp UI).</description>
    </item>
    
    <item>
      <title>Troubleshoot - tips for using Vamp</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.4/tips-for-using-vamp/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.4/tips-for-using-vamp/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Try this first If you encounter problems running services on an installed version of Vamp, check the following:
 Confirm that everything is installed ok:  Check the Vamp info (using GET &amp;lt;vamp url&amp;gt;/api/v1/info or in the info pane of the Vamp UI).</description>
    </item>
    
    <item>
      <title>Troubleshoot - tips for using Vamp</title>
      <link>https://vamp.io/documentation/troubleshoot/v0.9.5/tips-for-using-vamp/</link>
      <pubDate>Mon, 09 Jan 2017 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/troubleshoot/v0.9.5/tips-for-using-vamp/</guid>
      <description>Try this first If you encounter problems running services on an installed version of Vamp, check the following:
 Confirm that everything is installed ok:  Check the Vamp info (using GET &amp;lt;vamp url&amp;gt;/api/v1/info or in the info pane of the Vamp UI). If a component is not listed or reported as not connected, check the instructions to troubleshoot a full Vamp installation or troubleshoot the Vamp Hello world quickstart.</description>
    </item>
    
    <item>
      <title>Version 0.9.2</title>
      <link>https://vamp.io/documentation/release-notes/version-0-9-2/</link>
      <pubDate>Thu, 22 Dec 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/version-0-9-2/</guid>
      <description>22nd December 2016
This v0.9.2 release of Vamp has plenty of improvements in the areas of installation, robustness and stability. We also give the workflows feature some TLC so they&amp;rsquo;re even easier to use from the UI. Check out our &amp;ldquo;Automated canary release with rollback&amp;rdquo; tutorial to get a feeling for the power of Vamp workflows.
What is new  #789 Workflows can now be suspended without deleting them and there is an option to restart them.</description>
    </item>
    
    <item>
      <title>Release notes archive</title>
      <link>https://vamp.io/documentation/release-notes/archive/</link>
      <pubDate>Wed, 02 Nov 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/archive/</guid>
      <description>All release notes  Vamp version 0.9.5 Vamp version 0.9.4 Vamp version 0.9.3 Vamp version 0.9.2 Vamp version 0.9.1 Vamp version 0.9.0  Release notes for older Vamp versions can be found in the Github release notes.</description>
    </item>
    
    <item>
      <title>Events and metrics</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.2/events-and-metrics/</link>
      <pubDate>Fri, 21 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.2/events-and-metrics/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   To provide an effective feedback loop, HTTP/TCP logs should be collected, stored and analyzed. Collection and storing is done with a combination of HAProxy, VGA and Logstash setup. Logs are stored in Elasticsearch and can be later visualised by Kibana.</description>
    </item>
    
    <item>
      <title>Events and metrics</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.3/events-and-metrics/</link>
      <pubDate>Fri, 21 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.3/events-and-metrics/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   To provide an effective feedback loop, HTTP/TCP logs should be collected, stored and analyzed. Collection and storing is done with a combination of HAProxy, VGA and Logstash setup. Logs are stored in Elasticsearch and can be later visualised by Kibana.</description>
    </item>
    
    <item>
      <title>Events and metrics</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.4/events-and-metrics/</link>
      <pubDate>Fri, 21 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.4/events-and-metrics/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   To provide an effective feedback loop, HTTP/TCP logs should be collected, stored and analyzed.
How traffic is logged Vamp works with Filebeat to store logs from running applications and HAProxy (via Vamp Gateway Agent) in Elasticsearch indices. Logs are stored with a unique ID and can be later visualised by Kibana.</description>
    </item>
    
    <item>
      <title>Events and metrics</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.5/events-and-metrics/</link>
      <pubDate>Fri, 21 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.5/events-and-metrics/</guid>
      <description>To provide an effective feedback loop, HTTP/TCP logs should be collected, stored and analyzed.
How traffic is logged Vamp works with Filebeat to store logs from running applications and HAProxy (via Vamp Gateway Agent) in Elasticsearch indices. Logs are stored with a unique ID and can be later visualised by Kibana. Vamp API actions (including those generated by Vamp workflows and the Vamp UI) and running service events are stored in Elasticsearch indices according to event type.</description>
    </item>
    
    <item>
      <title>Events and metrics</title>
      <link>https://vamp.io/documentation/how-vamp-works/v1.0.0/events-and-metrics/</link>
      <pubDate>Fri, 21 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v1.0.0/events-and-metrics/</guid>
      <description>How traffic is logged Vamp works with Filebeat to store logs from HAProxy (via Vamp Gateway Agent) in Elasticsearch indices. Logs are stored with a unique ID and can be later visualised.
Vamp API actions (including those generated by Vamp workflows and the Vamp UI) and running service events are stored in Elasticsearch indices according to event type.
Data and events are read by Vamp components either directly from Elasticsearch or via the Vamp API:</description>
    </item>
    
    <item>
      <title>Katana</title>
      <link>https://vamp.io/documentation/release-notes/katana/</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/katana/</guid>
      <description> Katana is not an official release
All changes since the last official release are described below. This applies only to binaries built from source (master branch).
 What is new What has changed What next?
 Read all release notes on github (github.com/magneticio - Vamp releases) Try out Vamp with our single container hello world package.   </description>
    </item>
    
    <item>
      <title>Using the Vamp API</title>
      <link>https://vamp.io/documentation/api/v0.9.1/using-the-api/</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.1/using-the-api/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   New in Vamp 0.9.1
We&amp;rsquo;ve now added support for Websockets to our HTTP API. More information will follow soon.
 Vamp has one REST API. This page explains how to specify pagination, and json and yaml content types, and how to effectively use the Vamp REST API.</description>
    </item>
    
    <item>
      <title>Version 0.9.0</title>
      <link>https://vamp.io/documentation/release-notes/version-0-9-0/</link>
      <pubDate>Wed, 19 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/version-0-9-0/</guid>
      <description>9th September 2016
The Vamp 0.9.0 release is a very important milestone in the lifecycle of Vamp, as we&amp;rsquo;re removing the Alpha label and are moving to Beta! This means that we will do our utmost best to avoid breaking changes in our API&amp;rsquo;s and DSL, focus even more on stabilising and optimising the current feature-set, while of course continuously introducing powerful new features.
The Vamp 0.9.0 release is the culmination of three months of hard work by our amazing team!</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/kubernetes/</link>
      <pubDate>Tue, 04 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/kubernetes/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   The installation will run Vamp together with etcd, Elasticsearch and Logstash on Google container engine and kubernetes. (We will also deploy our demo Sava application to give you something to play around on). Before you begin, it is advisable to try out the official Quickstart for Google Container Engine tutorial first (google.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/kubernetes/</link>
      <pubDate>Tue, 04 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/kubernetes/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   The installation will run Vamp together with etcd and Elasticsearch on Google container engine and kubernetes. Before you begin, it is advisable to try out the official Quickstart for Google Container Engine tutorial first (google.com - container engine quickstart).
Note!</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/kubernetes/</link>
      <pubDate>Tue, 04 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/kubernetes/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   The installation will run Vamp together with etcd and Elasticsearch on Google container engine and kubernetes. Before you begin, it is advisable to try out the official Quickstart for Google Container Engine tutorial first (google.com - container engine quickstart).
Note!</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/kubernetes/</link>
      <pubDate>Tue, 04 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/kubernetes/</guid>
      <description>Azure Container Service Please refer to our dedicated Azure Kubernetes installation guide for deploying Vamp and Kubernetes on Azure Container Service
Google Container Engine The installation will run Vamp together with etcd and Elasticsearch on Google container engine and kubernetes. Before you begin, it is advisable to try out the official Quickstart for Google Container Engine tutorial first (google.com - container engine quickstart).
Tested against This guide has been tested on Kubernetes 1.</description>
    </item>
    
    <item>
      <title>Kubernetes Quickstart</title>
      <link>https://vamp.io/documentation/installation/v1.0.0/kubernetes/</link>
      <pubDate>Tue, 04 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v1.0.0/kubernetes/</guid>
      <description>This section describes how to quickly install Vamp 1.0 on Kubernetes so you can evaluate it. The installation uses an installer built into the Vamp Lifter application to bootstrap a full Vamp installation.
After a successful installation, you will be able to login to Vamp EE as an admin user and deploy services.
Note!
Do not run this default installation in production! It does not include persistent storage and makes use of a Hashicorp Vault &amp;lsquo;dev&amp;rsquo; server.</description>
    </item>
    
    <item>
      <title>Version 0.9.1</title>
      <link>https://vamp.io/documentation/release-notes/version-0-9-1/</link>
      <pubDate>Sat, 01 Oct 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/release-notes/version-0-9-1/</guid>
      <description>1st November 2016
The new stuff This release of Vamp introduces:
 The biggie: We&amp;rsquo;ve added Websockets support to our HTTP API. And we&amp;rsquo;re now using this heavily in our new UI to improve responsiveness, smoothness and speed. https://github.com/magneticio/vamp/issues/529 We&amp;rsquo;ve updated our UI to a nice dark theme due to public demand, we love it as it&amp;rsquo;s much easier on the eyes, and of course we&amp;rsquo;re very interested in hearing your thoughts!</description>
    </item>
    
    <item>
      <title>Azure Container Service</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/azure-container-service/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/azure-container-service/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   To run Vamp together with Azure Container Service (azure.microsoft.com - Container Service), you need to use DC/OS as the default ACS Docker container scheduler.
To install DC/OS in Azure you should follow these steps: https://dcos.io/docs/1.8/administration/installing/cloud/azure/
After you have activated your ACS setup with DC/OS, go to your DC/OS admin environment and install Vamp using our DC/OS installation instructions.</description>
    </item>
    
    <item>
      <title>Azure Container Service</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/azure-container-service/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/azure-container-service/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   To run Vamp together with Azure Container Service (azure.microsoft.com - Container Service), you need to use DC/OS as the default ACS Docker container scheduler.
To install DC/OS in Azure you should follow these steps: https://dcos.io/docs/1.8/administration/installing/cloud/azure/
After you have activated your ACS setup with DC/OS, go to your DC/OS admin environment and install Vamp using our DC/OS installation instructions.</description>
    </item>
    
    <item>
      <title>Azure Container Service</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/azure-container-service/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/azure-container-service/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   To run Vamp together with Azure Container Service (azure.microsoft.com - Container Service), use DC/OS as the default ACS Docker container scheduler.
To install DC/OS in Azure you should follow these steps: https://dcos.io/docs/1.8/administration/installing/cloud/azure/
After you have activated your ACS setup with DC/OS, go to your DC/OS admin environment and install Vamp using our DC/OS installation instructions.</description>
    </item>
    
    <item>
      <title>Azure Container Service</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/azure-container-service/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/azure-container-service/</guid>
      <description>You can run Vamp on Azure Container Service with either the DC/OS or Kubernetes orchestrator.
DC/OS Orchestrator To install DC/OS on ACS you should follow these steps:
 Follow the instructions in the ACS DC/OS quickstart. After you have activated your ACS setup with DC/OS, go to your DC/OS admin environment and install Vamp using our DC/OS installation instructions.  What next?
 Once you have Vamp up and running you can jump into the getting started tutorials.</description>
    </item>
    
    <item>
      <title>DC/OS 1.7 and 1.8</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/dcos/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/dcos/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   There are different ways to install Vamp on DC.OS. On this page we start out with the most common setup, but if you are interested in doing a custom install or working with public and private nodes you should jump to that section.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/docker/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/docker/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can talk directly to a Docker daemon and its driver is configured by default. This is useful for local testing. Vamp can even run inside Docker while deploying to Docker. You can pass native Docker options by using the Docker dialect in a Vamp blueprint.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/docker/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/docker/</guid>
      <description>Note!
Vamp v0.9.3 has not been tested on the latest local version of Docker. Docker Swarm support is coming soon, see github.com - issue #690: Docker swarm support
 Vamp can talk directly to a Docker daemon and its driver is configured by default. This is useful for local testing. Vamp can even run inside Docker while deploying to Docker. You can pass native Docker options by using the Docker dialect in a Vamp blueprint.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/docker/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/docker/</guid>
      <description>Note!
Vamp v0.9.4 has not been tested on the latest local version of Docker. Docker Swarm support is coming soon, see github.com - issue #690: Docker swarm support
 Vamp can talk directly to a Docker daemon and its driver is configured by default. This is useful for local testing. Vamp can even run inside Docker while deploying to Docker. You can pass native Docker options by using the Docker dialect in a Vamp blueprint.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/docker/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/docker/</guid>
      <description>Note!
Vamp v0.9.5 has not been tested on the latest local version of Docker. Docker Swarm support is coming soon, see github.com - issue #690: Docker swarm support
 Vamp can talk directly to a Docker daemon and its driver is configured by default. This is useful for local testing. Vamp can even run inside Docker while deploying to Docker. You can pass native Docker options by using the Docker dialect in a Vamp blueprint.</description>
    </item>
    
    <item>
      <title>Mesos/Marathon</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/mesos-marathon/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/mesos-marathon/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can use the full power of Marathon running on either a DCOS cluster or custom Mesos cluster. You can use Vamp&amp;rsquo;s DSL, or you can pass native Marathon options by using a dialect in a blueprint.
Install The instructions included on the DC/OS installation page will also work with Mesos/Marathon.</description>
    </item>
    
    <item>
      <title>Mesos/Marathon</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/mesos-marathon/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/mesos-marathon/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can use the full power of Marathon running on either a DCOS cluster or custom Mesos cluster. You can use Vamp&amp;rsquo;s DSL, or you can pass native Marathon options by using a dialect in a blueprint.
Install The instructions included on the DC/OS installation page will also work with Mesos/Marathon.</description>
    </item>
    
    <item>
      <title>Mesos/Marathon</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/mesos-marathon/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/mesos-marathon/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can use the full power of Marathon running on either a DCOS cluster or custom Mesos cluster. You can use Vamp&amp;rsquo;s DSL, or you can pass native Marathon options by using a dialect in a blueprint.
Install The instructions included on the DC/OS installation page will also work with Mesos/Marathon.</description>
    </item>
    
    <item>
      <title>Mesos/Marathon</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/mesos-marathon/</link>
      <pubDate>Fri, 30 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/mesos-marathon/</guid>
      <description>Vamp can use the full power of Marathon running on either a DCOS cluster or custom Mesos cluster. You can use Vamp&amp;rsquo;s DSL, or you can pass native Marathon options by using a dialect in a blueprint.
Install The instructions included on the DC/OS installation page will also work with Mesos/Marathon.
Set Marathon as the Vamp container driver  Set up a DCOS cluster using Mesosphere&amp;rsquo;s assisted install on AWS (mesosphere.</description>
    </item>
    
    <item>
      <title>Deployment Models</title>
      <link>https://vamp.io/documentation/how-vamp-works/v1.0.0/deployment-models/</link>
      <pubDate>Thu, 15 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v1.0.0/deployment-models/</guid>
      <description>Architectural considerations The Vamp architecture consists seven key components: four core components and three dependencies. The core Vamp components are Vamp, Lifter, the Vamp Gateway Agents (VGAs) and Vamp Workflow Agents. The dependencies are Hashicorp Vault (Vault), MySQL and Elasticsearch.
Whilst Vamp can be deployed in a number of different configurations, there are some key data and security considerations that should be taken into account:
 Containers are short-lived. For example, the Kubernetes documentation specifically says pods won’t survive scheduling failures, node failures, or other evictions, such as due to lack of resources, or in the case of node maintenance Nodes are frequently short-lived, they can be removed if the cluster is resized, they can fail like any other VM, or be replaced in the case of maintenance Services are generally longer lived than both the containers which implement the service and the nodes which the containers run Cluster and service configuration data is longer lived than the clusters and services that they define There is an increasing trend of legal requirements to hold data within national data centres Depending on the regulatory frameworks under which your organization operates your audit data may need to be very long-lived  In terms of Vamp deployment models:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vamp.io/documentation/installation/v0.9.5/overview/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/overview/</guid>
      <description>Before you get Vamp up and running on your architecture, it is helpful to understand how vamp works and the role of each component and its preferred location in a typical architecture.
If you need help you can find us on Gitter
Requirements  Vamp requirements  Install Vamp The Vamp UI includes mixpanel integration. We monitor data on Vamp usage solely to inform our ongoing product development. Feel free to block this at your firewall, or contact us if you’d like further details.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vamp.io/documentation/installation/v1.0.0/overview/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v1.0.0/overview/</guid>
      <description>Before you get Vamp up and running on your architecture, it is helpful to understand how vamp works and the role of each component and its preferred location in a typical deployment model.
Requirements  Vamp requirements  Vamp quickstart installation As the name suggests, quickstart guides you through a few simple steps to deploys an evaluation version of Vamp. Quickstart uses an all-in-one cluster model that is only suitable for evaluating Vamp.</description>
    </item>
    
    <item>
      <title>API Reference</title>
      <link>https://vamp.io/documentation/api/v0.9.1/api-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.1/api-reference/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   This page gives full details of all available API calls. See using the Vamp API for details on pagination, JSON and YAML content types and effective use of the API.
 Resource descriptions: blueprints, breeds, conditions, escalations, scales, slas Runtime entities: deployments, deployment scales, deployment SLAs, gateways Data: events, health, metrics System: info, config, haproxy Debug: sync, sla, escalation  Blueprints Read about using blueprints.</description>
    </item>
    
    <item>
      <title>Architecture and components</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.2/architecture-and-components/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.2/architecture-and-components/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Architecture Vamp and the Vamp Gateway Agent require specific elements in your architecture to handle orchestration, routing, persistence and metrics aggregation. There is no set architecture required for running Vamp and every use case or specific combination of tools and platforms can have its own set up.</description>
    </item>
    
    <item>
      <title>Architecture and components</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.3/architecture-and-components/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.3/architecture-and-components/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Architecture Vamp and the Vamp Gateway Agent require specific elements in your architecture to handle orchestration, routing, persistence and metrics aggregation. There is no set architecture required for running Vamp and every use case or specific combination of tools and platforms can have its own set up.</description>
    </item>
    
    <item>
      <title>Architecture and components</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.4/architecture-and-components/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.4/architecture-and-components/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Architecture Vamp and the Vamp Gateway Agent require specific elements in your architecture to handle orchestration, routing, persistence and metrics aggregation. There is no set architecture required for running Vamp and every use case or specific combination of tools and platforms can have its own set up.</description>
    </item>
    
    <item>
      <title>Architecture and components</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.5/architecture-and-components/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.5/architecture-and-components/</guid>
      <description>Architecture Vamp&amp;rsquo;s architecture consists of several components that work together to deliver canary releasing, microscaling and other valueable release and runtime optimisation and automation workflows. The main components of Vamp are Vamp &amp;ldquo;core&amp;rdquo; (the brains), Vamp Gateway Agent (creating an ingress and intra-service mesh based on reverse proxies) and Vamp Workflow Agent (running automation scripts injected in containers managed by Vamp).
Vamp is a JVM application and is typically deployed as a Docker container inside your container cluster where Vamp will bootstrap it&amp;rsquo;s dependency containers.</description>
    </item>
    
    <item>
      <title>Artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/artifacts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/artifacts/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp has a few basic entities or artifacts you can work with, these can be classed as static resource descriptions and dynamic runtime entities. Note that API actions on static resource descriptions are mostly synchronous, while API actions on dynamic runtime entities are largely asychronous.</description>
    </item>
    
    <item>
      <title>Artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/artifacts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/artifacts/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp has a few basic entities or artifacts you can work with, these can be classed as static resource descriptions and dynamic runtime entities. Note that API actions on static resource descriptions are mostly synchronous, while API actions on dynamic runtime entities are largely asychronous.</description>
    </item>
    
    <item>
      <title>Artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/artifacts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/artifacts/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp has a few basic entities or artifacts you can work with, these can be classed as static resource descriptions and dynamic runtime entities. Note that API actions on static resource descriptions are mostly synchronous, while API actions on dynamic runtime entities are largely asychronous.</description>
    </item>
    
    <item>
      <title>Artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/artifacts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/artifacts/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp has a few basic entities or artifacts you can work with, these can be classed as static resource descriptions and dynamic runtime entities. Note that API actions on static resource descriptions are mostly synchronous, while API actions on dynamic runtime entities are largely asychronous.</description>
    </item>
    
    <item>
      <title>Artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/artifacts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/artifacts/</guid>
      <description>Vamp has a few basic entities or artifacts you can work with, these can be classed as static resource descriptions and dynamic runtime entities. Note that API actions on static resource descriptions are mostly synchronous, while API actions on dynamic runtime entities are largely asychronous.
Dynamic runtime entities  Deployments are running blueprints. You can have many deployments from one blueprint and perform actions on each at runtime. Plus, you can turn any running deployment into a blueprint.</description>
    </item>
    
    <item>
      <title>Artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/artifacts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/artifacts/</guid>
      <description>Vamp has a few basic entities or artifacts you can work with, these can be classed as static resource descriptions and dynamic runtime entities. Note that API actions on static resource descriptions are mostly synchronous, while API actions on dynamic runtime entities are largely asychronous.
Dynamic runtime entities  Deployments are running blueprints. You can have many deployments from one blueprint and perform actions on each at runtime. Plus, you can turn any running deployment into a blueprint.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-blueprints/</guid>
      <description>Blueprints are static artifacts. They describe how breeds work in runtime and what properties they should have. Read about using blueprints.
Actions  List - return a list of all stored blueprints Get - get a single stored blueprint Create - create a new blueprint Update - update an existing blueprint Delete - delete a stored blueprint  Blueprint resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-blueprints/</guid>
      <description>Blueprints are static artifacts. They describe how breeds work in runtime and what properties they should have. Read about using blueprints.
Actions  List - return a list of all stored blueprints Get - get a single stored blueprint Create - create a new blueprint Update - update an existing blueprint Delete - delete a stored blueprint  Blueprint resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-blueprints/</guid>
      <description>Blueprints are static artifacts. They describe how breeds work in runtime and what properties they should have. Read about using blueprints.
Actions  List - return a list of all stored blueprints Get - get a single stored blueprint Create - create a new blueprint Update - update an existing blueprint Delete - delete a stored blueprint  Blueprint resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-blueprints/</guid>
      <description>Blueprints are static artifacts. They describe how breeds work in runtime and what properties they should have. Read about using blueprints.
Actions  List - return a list of all stored blueprints Get - get a single stored blueprint Create - create a new blueprint Update - update an existing blueprint Delete - delete a stored blueprint  Blueprint resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/blueprints/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Blueprints are execution plans - they describe how your services should be hooked up and what their topology should look like at runtime. This means you reference your breeds (or define them inline) and add runtime configuration to them.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/blueprints/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Blueprints are execution plans - they describe how your services should be hooked up and what their topology should look like at runtime. This means you reference your breeds (or define them inline) and add runtime configuration to them.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/blueprints/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Blueprints are execution plans - they describe how your services should be hooked up and what their topology should look like at runtime. This means you reference your breeds (or define them inline) and add runtime configuration to them.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/blueprints/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Blueprints are execution plans - they describe how your services should be hooked up and what their topology should look like at runtime. This means you reference your breeds (or define them inline) and add runtime configuration to them. Blueprints can be created and edited using the Vamp Domain Specific Language (DSL).</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/blueprints/</guid>
      <description>Blueprints are execution plans - they describe how your services should be hooked up and what their topology should look like at runtime. This means you reference your breeds (or define them inline) and add runtime configuration to them. Blueprints can be created and edited using the Vamp Domain Specific Language (DSL). Vamp tracks all revisions made to artifacts, so you can check back and compare the current blueprint against a previous version.</description>
    </item>
    
    <item>
      <title>Blueprints</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/blueprints/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/blueprints/</guid>
      <description>Blueprints are execution plans - they describe how your services should be hooked up and what their topology should look like at runtime. This means you reference your breeds (or define them inline) and add runtime configuration to them. Blueprints can be created and edited using the Vamp Domain Specific Language (DSL). Vamp tracks all revisions made to artifacts, so you can check back and compare the current blueprint against a previous version.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-breeds/</guid>
      <description>Breeds are static artifacts that describe individual services and can be referenced from blueprints or workflows. Read about using breeds.
Actions  List - return a list of all stored breeds Get - get a single stored breed Create - create a new breed Update - update a stored breed Delete - delete a stored breed  Breed resource You can define breeds inline or store them separately under a unique name and reference them from a blueprint, deployment or workflow resource.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-breeds/</guid>
      <description>Breeds are static artifacts that describe individual services and can be referenced from blueprints or workflows. Read about using breeds.
Actions  List - return a list of all stored breeds Get - get a single stored breed Create - create a new breed Update - update a stored breed Delete - delete a stored breed  Breed resource You can define breeds inline or store them separately under a unique name and reference them from a blueprint, deployment or workflow resource.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-breeds/</guid>
      <description>Breeds are static artifacts that describe individual services and can be referenced from blueprints or workflows. Read about using breeds.
Actions  List - return a list of all stored breeds Get - get a single stored breed Create - create a new breed Update - update a stored breed Delete - delete a stored breed  Breed resource You can define breeds inline or store them separately under a unique name and reference them from a blueprint, deployment or workflow resource.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-breeds/</guid>
      <description>Breeds are static artifacts that describe individual services and can be referenced from blueprints or workflows. Read about using breeds.
Actions  List - return a list of all stored breeds Get - get a single stored breed Create - create a new breed Update - update a stored breed Delete - delete a stored breed  Breed resource You can define breeds inline or store them separately under a unique name and reference them from a blueprint, deployment or workflow resource.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/breeds/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds are static descriptions of applications and services available for deployment. Each breed is described by the DSL in YAML notation or JSON, whatever you like. This description includes name, version, available parameters, dependencies etc. To a certain degree, you could compare a breed to a Maven artifact or a Ruby Gem description.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/breeds/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds are static descriptions of applications and services available for deployment. Each breed is described by the DSL in YAML notation or JSON, whatever you like. This description includes name, version, available parameters, dependencies etc. To a certain degree, you could compare a breed to a Maven artifact or a Ruby Gem description.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/breeds/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds are static descriptions of applications and services available for deployment. Each breed is described by the DSL in YAML notation or JSON, whatever you like. This description includes name, version, available parameters, dependencies etc. To a certain degree, you could compare a breed to a Maven artifact or a Ruby Gem description.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/breeds/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds are static descriptions of applications and services available for deployment. Each breed is described by the DSL in YAML notation or JSON, whatever you like. This description includes name, version, available parameters, dependencies etc. To a certain degree, you could compare a breed to a Maven artifact or a Ruby Gem description.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/breeds/</guid>
      <description>Breeds are static descriptions of applications and services available for deployment. Each breed is described by the DSL in YAML notation or JSON, whatever you like. This description includes name, version, available parameters, dependencies etc. To a certain degree, you could compare a breed to a Maven artifact or a Ruby Gem description. Vamp tracks all revisions made to artifacts, so you can check back and compare a current breed against a previous version.</description>
    </item>
    
    <item>
      <title>Breeds</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/breeds/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/breeds/</guid>
      <description>Breeds are static descriptions of applications and services available for deployment. Each breed is described by the DSL in YAML notation or JSON, whatever you like. This description includes name, version, available parameters, dependencies etc. To a certain degree, you could compare a breed to a Maven artifact or a Ruby Gem description. Vamp tracks all revisions made to artifacts, so you can check back and compare a current breed against a previous version.</description>
    </item>
    
    <item>
      <title>Common parameters</title>
      <link>https://vamp.io/documentation/api/v0.9.2/using-the-api/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/using-the-api/</guid>
      <description>The headers described below can be added to all API requests to specify JSON or YAML for requests and responses, and manage pagination for responses.
Request and response format Requests and responses can be formatted in JSON or YAML (default JSON).
   Request parameters options default description     content-type application/x-yaml or application/json application/json format of the request   accept application/x-yaml or application/json application/json format of the response    Pagination Vamp API endpoints support pagination.</description>
    </item>
    
    <item>
      <title>Common parameters</title>
      <link>https://vamp.io/documentation/api/v0.9.3/using-the-api/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/using-the-api/</guid>
      <description>The headers described below can be added to all API requests to specify JSON or YAML for requests and responses, and manage pagination for responses.
Request and response format Requests and responses can be formatted in JSON or YAML (default JSON).
   Request parameters options default description     content-type application/x-yaml or application/json application/json format of the request   accept application/x-yaml or application/json application/json format of the response    Pagination Vamp API endpoints support pagination.</description>
    </item>
    
    <item>
      <title>Common parameters</title>
      <link>https://vamp.io/documentation/api/v0.9.4/using-the-api/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/using-the-api/</guid>
      <description>The headers described below can be added to all API requests to specify JSON or YAML for requests and responses, and manage pagination for responses.
Request and response format Requests and responses can be formatted in JSON or YAML (default JSON).
   Request parameters options default description     content-type application/x-yaml or application/json application/json format of the request   accept application/x-yaml or application/json application/json format of the response    Pagination Vamp API endpoints support pagination.</description>
    </item>
    
    <item>
      <title>Common parameters</title>
      <link>https://vamp.io/documentation/api/v0.9.5/using-the-api/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/using-the-api/</guid>
      <description>The headers described below can be added to all API requests to specify JSON or YAML for requests and responses, and manage pagination for responses.
Request and response format Requests and responses can be formatted in JSON or YAML (default JSON).
   Request parameters options default description     content-type application/x-yaml or application/json application/json format of the request   accept application/x-yaml or application/json application/json format of the response    Pagination Vamp API endpoints support pagination.</description>
    </item>
    
    <item>
      <title>Concepts and components</title>
      <link>https://vamp.io/documentation/how-vamp-works/v1.0.0/concepts-and-components/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v1.0.0/concepts-and-components/</guid>
      <description>Concepts Multi-Tenancy Vamp supports multiple tenants. Tenants can be different teams within a business division, different business divisions inside the same organization, or entirely different organizations. Each tenant&amp;rsquo;s data is isolated and remains invisible to other tenants.
Namespaces Vamp implements multi-tenancy using a two-level namespace model. A tenant has exactly one organisation namespace plus one or more environment namespaces.
Organizations The organization namespace holds configuration that is common to all environments such as password salts, users and roles.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-conditions/</guid>
      <description>Condition templates are static artifacts. You can save and manage condition templates through the API, these can then be referenced and applied to gateways. Read about using conditions and using gateways.
Actions  List - return a list of all stored condition templates Get - get a single stored condition template Create - create a new condition template Update - update a condition template Delete - delete a stored condition template  Condition resource You can define conditions inline or store them separately as templates under a unique name and reference them from a blueprint, breed or gateway resource.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-conditions/</guid>
      <description>Condition templates are static artifacts. You can save and manage condition templates through the API, these can then be referenced and applied to gateways. Read about using conditions and using gateways.
Actions  List - return a list of all stored condition templates Get - get a single stored condition template Create - create a new condition template Update - update a condition template Delete - delete a stored condition template  Condition resource You can define conditions inline or store them separately as templates under a unique name and reference them from a blueprint, breed or gateway resource.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-conditions/</guid>
      <description>Condition templates are static artifacts. You can save and manage condition templates through the API, these can then be referenced and applied to gateways. Read about using conditions and using gateways.
Actions  List - return a list of all stored condition templates Get - get a single stored condition template Create - create a new condition template Update - update a condition template Delete - delete a stored condition template  Condition resource You can define conditions inline or store them separately as templates under a unique name and reference them from a blueprint, breed or gateway resource.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-conditions/</guid>
      <description>Condition templates are static artifacts. You can save and manage condition templates through the API, these can then be referenced and applied to gateways. Read about using conditions and using gateways.
Actions  List - return a list of all stored condition templates Get - get a single stored condition template Create - create a new condition template Update - update a condition template Delete - delete a stored condition template  Condition resource You can define conditions inline or store them separately as templates under a unique name and reference them from a blueprint, breed or gateway resource.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/conditions/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Conditions are used by gateways to filter incoming traffic for routing between services in a cluster. Read more about gateway usage. You can define conditions inline in a blueprint or store them separately under a unique name on the /conditions endpoint and just use that name to reference them from a blueprint.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/conditions/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Conditions are used by gateways to filter incoming traffic for routing between services in a cluster. Read more about gateway usage. You can define conditions inline in a blueprint or store them separately under a unique name on the /conditions endpoint and just use that name to reference them from a blueprint.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/conditions/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Conditions are used by gateways to filter incoming traffic for routing between services in a cluster. Read more about gateway usage. You can define conditions inline in a blueprint or store them separately under a unique name on the /conditions endpoint and just use that name to reference them from a blueprint.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/conditions/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Conditions are used by gateways to filter incoming traffic for routing between services in a cluster. Read more about gateway usage. You can define conditions inline in a blueprint or store them separately under a unique name on the /conditions endpoint and just use that name to reference them from a blueprint.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/conditions/</guid>
      <description>Conditions are used by gateways to filter incoming traffic for routing between services in a cluster. Read more about gateway usage. You can define conditions inline in a blueprint or store them separately under a unique name on the /conditions endpoint and just use that name to reference them from a blueprint.
Example - simple inline condition This would be used directly inside a blueprint.
--- condition_strength: 10% # Amount of traffic for this service in percents.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/conditions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/conditions/</guid>
      <description>Conditions are used by gateways to filter incoming traffic for routing between services in a cluster. Read more about gateway usage. You can define conditions inline in a blueprint or store them separately under a unique name on the /conditions endpoint and just use that name to reference them from a blueprint.
Example - simple inline condition This would be used directly inside a blueprint.
--- condition_strength: 10% # Amount of traffic for this service in percents.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-config/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-config/</guid>
      <description>Vamp&amp;rsquo;s parameters can be retrieved from the /config APi endpoint. Read more about Vamp configuration
Actions  List - returns a full list of all config parameters. Get - explicitly request a specific config parameter.  Config parameters Config parameters are described in detail in the configuration reference.
The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-config/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-config/</guid>
      <description>Vamp&amp;rsquo;s parameters can be retrieved from the /config APi endpoint. Read more about Vamp configuration
Actions  List - returns a full list of all config parameters. Get - explicitly request a specific config parameter.  Config parameters Config parameters are described in detail in the configuration reference.
The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-config/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-config/</guid>
      <description>Vamp&amp;rsquo;s parameters can be retrieved from the /config APi endpoint. Read more about Vamp configuration
Actions  List - returns a full list of all config parameters. Get - explicitly request a specific config parameter.  Config parameters Config parameters are described in detail in the configuration reference.
The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-config/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-config/</guid>
      <description>Vamp&amp;rsquo;s parameters can be retrieved from the /config APi endpoint. Read more about Vamp configuration
Actions  List - returns a full list of all config parameters. Get - explicitly request a specific config parameter.  Config parameters Config parameters are described in detail in the configuration reference.
The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Configuration reference</title>
      <link>https://vamp.io/documentation/configure/v0.9.2/configuration-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.2/configuration-reference/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   This page describes the structure and parameters in the Vamp configuration files (reference.conf and application.conf). For details on how to customise your Vamp configuration, see how to configure Vamp.
Vamp configuration parameters The full reference.conf file can be found in the Vamp project repo (github.</description>
    </item>
    
    <item>
      <title>Configuration reference</title>
      <link>https://vamp.io/documentation/configure/v0.9.3/configuration-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.3/configuration-reference/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   This page describes the structure and parameters in the Vamp configuration files (reference.conf and application.conf). For details on how to customise your Vamp configuration, see how to configure Vamp.
Vamp:
 Vamp configuration Vamp lifter  By vendor:
 DC/OS (Mesos, Marathon &amp;amp; Chronos) Kubernetes Rancher Docker Elasticsearch Zookeeper Consul etcd Redis HAProxy  Vamp configuration The full Vamp reference.</description>
    </item>
    
    <item>
      <title>Configuration reference</title>
      <link>https://vamp.io/documentation/configure/v0.9.4/configuration-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.4/configuration-reference/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   This page describes the structure and parameters in the Vamp configuration files (reference.conf and application.conf). For details on how to customise your Vamp configuration, see how to configure Vamp.
Vamp:
 Vamp configuration Vamp lifter  By vendor:
 DC/OS (Mesos, Marathon &amp;amp; Chronos) Kubernetes Rancher Docker Elasticsearch Zookeeper Consul etcd Redis HAProxy  Vamp configuration The full Vamp reference.</description>
    </item>
    
    <item>
      <title>Configuration reference</title>
      <link>https://vamp.io/documentation/configure/v0.9.5/configuration-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.5/configuration-reference/</guid>
      <description>This page describes the structure and parameters in the default Vamp configuration files (reference.conf). For details on how to customise your Vamp configuration, see how to configure Vamp.
Vamp:
 Vamp configuration Vamp lifter  By vendor:
 DC/OS (Mesos, Marathon &amp;amp; Chronos) Kubernetes Rancher Docker AWS Elasticsearch MySQL PostgreSQL Microsoft SQL server In-Memory only Zookeeper Consul etcd Redis HAProxy  Vamp configuration The Vamp reference.conf files can be found in the respective Vamp project repos.</description>
    </item>
    
    <item>
      <title>Debug</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-debug/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-debug/</guid>
      <description> Actions  Force sync Force SLA check Force escalation  Force sync Forces Vamp to perform a synchronization cycle, regardless of the configured default interval.
GET /api/v1/sync  Force SLA check Forces Vamp to perform an SLA check, regardless of the configured default interval.
GET /api/v1/sla  Force escalation Forces Vamp to perform an escalation check, regardless of the configured default interval.
GET /api/v1/escalation  </description>
    </item>
    
    <item>
      <title>Deployment SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-deployment-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-deployment-slas/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment SLA Create - create or update a specific deployment SLA Delete - delete a deployment SLA  Get single deployment SLA Return details for a specific SLA that’s part of a specific cluster.</description>
    </item>
    
    <item>
      <title>Deployment SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-deployment-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-deployment-slas/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment SLA Create - create or update a specific deployment SLA Delete - delete a deployment SLA  Get single deployment SLA Return details for a specific SLA that’s part of a specific cluster.</description>
    </item>
    
    <item>
      <title>Deployment SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-deployment-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-deployment-slas/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment SLA Create - create or update a specific deployment SLA Delete - delete a deployment SLA  Get single deployment SLA Return details for a specific SLA that’s part of a specific cluster.</description>
    </item>
    
    <item>
      <title>Deployment SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-deployment-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-deployment-slas/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment SLA Create - create or update a specific deployment SLA Delete - delete a deployment SLA  Get single deployment SLA Return details for a specific SLA that’s part of a specific cluster.</description>
    </item>
    
    <item>
      <title>Deployment scales</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-deployment-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-deployment-scales/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment scale Update - update a deployment scale  Get single deployment scale Return details of a specific deployment scale that’s part of a service inside a cluster.
Request  GET /api/v1/deployments/{deployment_name}/clusters/{cluster_name}/services/{service_name}/scale The request body should be empty.</description>
    </item>
    
    <item>
      <title>Deployment scales</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-deployment-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-deployment-scales/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment scale Update - update a deployment scale  Get single deployment scale Return details of a specific deployment scale that’s part of a service inside a cluster.
Request  GET /api/v1/deployments/{deployment_name}/clusters/{cluster_name}/services/{service_name}/scale The request body should be empty.</description>
    </item>
    
    <item>
      <title>Deployment scales</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-deployment-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-deployment-scales/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment scale Update - update a deployment scale  Get single deployment scale Return details of a specific deployment scale that’s part of a service inside a cluster.
Request  GET /api/v1/deployments/{deployment_name}/clusters/{cluster_name}/services/{service_name}/scale The request body should be empty.</description>
    </item>
    
    <item>
      <title>Deployment scales</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-deployment-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-deployment-scales/</guid>
      <description>Deployment scales are singular resources: you only have one scale per service. Deleting a scale is not a meaningful action. Read about using deployments and using scales.
Actions  Get - return details of a specific deployment scale Update - update a deployment scale  Get single deployment scale Return details of a specific deployment scale that’s part of a service inside a cluster.
Request  GET /api/v1/deployments/{deployment_name}/clusters/{cluster_name}/services/{service_name}/scale The request body should be empty.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-deployments/</guid>
      <description>Deployments are dynamic runtime structures, so changes to them take time to execute and can possibly fail. Most API calls to the /deployments endpoint will, therefore, return a 202: Accepted return code, indicating the asynchronous nature of the call. Deployments have a set of sub resources: deployment SLAs, deployment scales and gateways. These are instantiations of their static counterparts. Read about using deployments.
Actions  List - return details of all running deployments Get - get details of a single running deployment Create - initiate a new deployment Create named deployment - initiate a new deployment with a custom name (non UUID) Update - add to a running deployment (merge) Delete - remove elements from a running deployment  Deployment resource The resource example below is in YAML format.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-deployments/</guid>
      <description>Deployments are dynamic runtime structures, so changes to them take time to execute and can possibly fail. Most API calls to the /deployments endpoint will, therefore, return a 202: Accepted return code, indicating the asynchronous nature of the call. Deployments have a set of sub resources: deployment SLAs, deployment scales and gateways. These are instantiations of their static counterparts. Read about using deployments.
Actions  List - return details of all running deployments Get - get details of a single running deployment Create - initiate a new deployment Create named deployment - initiate a new deployment with a custom name (non UUID) Update - add to a running deployment (merge) Delete - remove elements from a running deployment  Deployment resource The resource example below is in YAML format.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-deployments/</guid>
      <description>Deployments are dynamic runtime structures, so changes to them take time to execute and can possibly fail. Most API calls to the /deployments endpoint will, therefore, return a 202: Accepted return code, indicating the asynchronous nature of the call. Deployments have a set of sub resources: deployment SLAs, deployment scales and gateways. These are instantiations of their static counterparts. Read about using deployments.
Actions  List - return details of all running deployments Get - get details of a single running deployment Create - initiate a new deployment Create named deployment - initiate a new deployment with a custom name (non UUID) Update - add to a running deployment (merge) Delete - remove elements from a running deployment  Deployment resource The resource example below is in YAML format.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-deployments/</guid>
      <description>Deployments are dynamic runtime structures, so changes to them take time to execute and can possibly fail. Most API calls to the /deployments endpoint will, therefore, return a 202: Accepted return code, indicating the asynchronous nature of the call. Deployments have a set of sub resources: deployment SLAs, deployment scales and gateways. These are instantiations of their static counterparts. Read about using deployments.
Actions  List - return details of all running deployments Get - get details of a single running deployment Create - initiate a new deployment Create named deployment - initiate a new deployment with a custom name (non UUID) Update - add to a running deployment (merge) Delete - remove elements from a running deployment  Deployment resource The resource example below is in YAML format.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/deployments/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   A deployment is a &amp;ldquo;running&amp;rdquo; blueprint. Over time, new blueprints can be merged with existing deployments or parts of the running blueprint can be removed from it. Each deployment can be exported as a blueprint and copy / pasted to another environment, or even to the same environment to function as a clone.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/deployments/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   A deployment is a &amp;ldquo;running&amp;rdquo; blueprint. Over time, new blueprints can be merged with existing deployments or parts of the running blueprint can be removed from it. Each deployment can be exported as a blueprint and copy / pasted to another environment, or even to the same environment to function as a clone.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/deployments/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   A deployment is a &amp;ldquo;running&amp;rdquo; blueprint. Over time, new blueprints can be merged with existing deployments or parts of the running blueprint can be removed from it. Each deployment can be exported as a blueprint and copy / pasted to another environment, or even to the same environment to function as a clone.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/deployments/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   A deployment is a &amp;ldquo;running&amp;rdquo; blueprint with added runtime information, such as start times, resolved ports etc. Existing deployments can be updated, merging new blueprints or removing parts from it. Each deployment can be exported as a blueprint and copy / pasted to another environment, or even to the same environment to function as a clone.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/deployments/</guid>
      <description>A deployment is a &amp;ldquo;running&amp;rdquo; blueprint with added runtime information, such as start times, resolved ports etc. Existing deployments can be updated, merging new blueprints or removing parts from it. Each deployment can be exported as a blueprint and copy / pasted to another environment, or even to the same environment to function as a clone.
On this page:  Create a deployment Track running deployments Deployment scenarios  Create a deployment You can create a deployment in the following ways:</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/deployments/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/deployments/</guid>
      <description>A deployment is a &amp;ldquo;running&amp;rdquo; blueprint with added runtime information, such as start times, resolved ports etc. Existing deployments can be updated, merging new blueprints or removing parts from it. Each deployment can be exported as a blueprint and copy / pasted to another environment, or even to the same environment to function as a clone.
On this page:  Create a deployment Track running deployments Deployment scenarios  Create a deployment You can create a deployment in the following ways:</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/environment-variables/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/environment-variables/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds and blueprints can include lists of environment variables that will be injected into the container at runtime. You set environment variables with the environment_variables keyword or its shorter version env, e.g. both examples below are equivalent.
--- environment_variables: PORT: 8080  --- env: PORT: 8080  Dependencies Breeds can also have dependencies on other breeds.</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/environment-variables/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/environment-variables/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds, blueprints and workflows can include a list of environment variables to be injected into the container at runtime. You set environment variables with the environment_variables keyword or its shorter version env, e.g. both examples below are equivalent.
--- environment_variables: PORT: 8080  --- env: PORT: 8080  &amp;lsquo;Hard&amp;rsquo; setting a variable You want to &amp;ldquo;hard set&amp;rdquo; an environment variable, just like doing an export MY_VAR=some_value in a shell.</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/environment-variables/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/environment-variables/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds, blueprints and workflows can include a list of environment variables to be injected into the container at runtime. You set environment variables with the environment_variables keyword or its shorter version env, e.g. both examples below are equivalent.
--- environment_variables: PORT: 8080  --- env: PORT: 8080  &amp;lsquo;Hard&amp;rsquo; setting a variable You want to &amp;ldquo;hard set&amp;rdquo; an environment variable, just like doing an export MY_VAR=some_value in a shell.</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/environment-variables/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/environment-variables/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Breeds, blueprints and workflows can include a list of environment variables to be injected into the container at runtime. You set environment variables with the environment_variables keyword or its shorter version env, e.g. both examples below are equivalent.
--- environment_variables: PORT: 8080  --- env: PORT: 8080  &amp;lsquo;Hard&amp;rsquo; setting a variable You want to &amp;ldquo;hard set&amp;rdquo; an environment variable, just like doing an export MY_VAR=some_value in a shell.</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/environment-variables/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/environment-variables/</guid>
      <description>Breeds, blueprints and workflows can include a list of environment variables to be injected into the container at runtime. You set environment variables with the environment_variables keyword or its shorter version env, e.g. both examples below are equivalent.
--- environment_variables: PORT: 8080  --- env: PORT: 8080  &amp;lsquo;Hard&amp;rsquo; setting a variable You want to &amp;ldquo;hard set&amp;rdquo; an environment variable, just like doing an export MY_VAR=some_value in a shell. This variable could be some external dependency you have no direct control over: the endpoint of some service you use that is out of your control.</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/environment-variables/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/environment-variables/</guid>
      <description>Breeds, blueprints and workflows can include a list of environment variables to be injected into the container at runtime. You set environment variables with the environment_variables keyword or its shorter version env, e.g. both examples below are equivalent.
--- environment_variables: PORT: 8080  --- env: PORT: 8080  &amp;lsquo;Hard&amp;rsquo; setting a variable You want to &amp;ldquo;hard set&amp;rdquo; an environment variable, just like doing an export MY_VAR=some_value in a shell. This variable could be some external dependency you have no direct control over: the endpoint of some service you use that is out of your control.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-escalations/</guid>
      <description>Escalation templates are static artifacts. You can save and manage escalation templates through the API, these can then be referenced in an sla and applied to each cluster in a blueprint. Read about using escalations and using slas.
Actions  List - return a list of all escalations Get - get a single escalation Create - create a new escalation Update - update a escalation Delete - delete a escalation  Escalation resource The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-escalations/</guid>
      <description>Escalation templates are static artifacts. You can save and manage escalation templates through the API, these can then be referenced in an sla and applied to each cluster in a blueprint. Read about using escalations and using slas.
Actions  List - return a list of all escalations Get - get a single escalation Create - create a new escalation Update - update a escalation Delete - delete a escalation  Escalation resource The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-escalations/</guid>
      <description>Escalation templates are static artifacts. You can save and manage escalation templates through the API, these can then be referenced in an sla and applied to each cluster in a blueprint. Read about using escalations and using slas.
Actions  List - return a list of all escalations Get - get a single escalation Create - create a new escalation Update - update a escalation Delete - delete a escalation  Escalation resource The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-escalations/</guid>
      <description>Escalation templates are static artifacts. You can save and manage escalation templates through the API, these can then be referenced in an sla and applied to each cluster in a blueprint. Read about using escalations and using slas.
Actions  List - return a list of all escalations Get - get a single escalation Create - create a new escalation Update - update a escalation Delete - delete a escalation  Escalation resource The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/escalations/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   An escalation is a workflow triggered by an escalation event. Vamp checks for these escalation events using a continuous background process with a configurable interval time. If the events match the escalation handlers defined in the DSL, the action is executed.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/escalations/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   An escalation is a workflow triggered by an escalation event. Vamp checks for these escalation events using a continuous background process with a configurable interval time. If the events match the escalation handlers defined in the DSL, the action is executed.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/escalations/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   An escalation is a workflow triggered by an escalation event. Vamp checks for these escalation events using a continuous background process with a configurable interval time. If the events match the escalation handlers defined in the DSL, the action is executed.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/escalations/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   An escalation is a workflow triggered by an escalation event. Vamp checks for these escalation events using a continuous background process with a configurable interval time. If the events match the escalation handlers defined in the DSL, the action is executed.</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/escalations/</guid>
      <description>An escalation is a workflow triggered by an escalation event. Vamp checks for these escalation events using a continuous background process with a configurable interval time. If the events match the escalation handlers defined in the DSL, the action is executed.
Again: escalation events can be generated by third party systems and they will be handled in the same manner as events created by Vamp SLA workflows.
Escalation handlers Any escalation that is triggered should be handled by an escalation handler</description>
    </item>
    
    <item>
      <title>Escalations</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/escalations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/escalations/</guid>
      <description>An escalation is a workflow triggered by an escalation event. Vamp checks for these escalation events using a continuous background process with a configurable interval time. If the events match the escalation handlers defined in the DSL, the action is executed.
Again: escalation events can be generated by third party systems and they will be handled in the same manner as events created by Vamp SLA workflows.
Escalation handlers Any escalation that is triggered should be handled by an escalation handler</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-events/</guid>
      <description>Read about using events and the Vamp events system.
Actions  List - return a list of all events (can be filtered) Create - create a new event stream - open SSE events stream  Event resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-events/</guid>
      <description>Read about using events and the Vamp events system.
Actions  List - return a list of all events (can be filtered) Create - create a new event stream - open SSE events stream  Event resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-events/</guid>
      <description>Read about using events and the Vamp events system.
Actions  List - return a list of all events (can be filtered) Create - create a new event stream - open SSE events stream  Event resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-events/</guid>
      <description>Read about using events and the Vamp events system.
Actions  List - return a list of all events (can be filtered) Create - create a new event stream - open SSE events stream  Event resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/events/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp collects events on all running services. Interaction with the API also creates events, like updating blueprints or deleting a deployment. Furthermore, Vamp allows third party applications to create events and trigger Vamp actions.
All events are stored and retrieved using the Event API that is part of Vamp.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/events/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp is a distributed system tied together by a central events stream. Every action in Vamp creates events, which in turn can be used as triggers for new actions. For example, gateway updates are triggered by deployments (synchronisation events), while canary releases and autoscaling actions are based on calculated health and metrics events.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/events/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp is a distributed system tied together by a central events stream. Every action in Vamp creates events, which in turn can be used as triggers for new actions. For example, gateway updates are triggered by deployments (synchronisation events), while canary releases and autoscaling actions are based on calculated health and metrics events.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/events/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp is a distributed system tied together by a central events stream. Every action in Vamp creates events, which in turn can be used as triggers for new actions. For example, gateway updates are triggered by deployments (synchronisation events), while canary releases and autoscaling actions are based on calculated health and metrics events.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/events/</guid>
      <description>Vamp is a distributed system tied together by a central events stream. Every action in Vamp creates events, which in turn can be used as triggers for new actions. For example, gateway updates are triggered by deployments (synchronisation events), while canary releases and autoscaling actions are based on calculated health and metrics events. Vamp collects events on all running services. Interaction with the API also creates events, like updating blueprints or deleting a deployment.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/events/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/events/</guid>
      <description>Vamp is a distributed system tied together by a central events stream. Every action in Vamp creates events, which in turn can be used as triggers for new actions. For example, gateway updates are triggered by deployments (synchronisation events), while canary releases and autoscaling actions are based on calculated health and metrics events. Vamp collects events on all running services. Interaction with the API also creates events, like updating blueprints or deleting a deployment.</description>
    </item>
    
    <item>
      <title>Example configurations</title>
      <link>https://vamp.io/documentation/configure/v0.9.2/example-configurations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.2/example-configurations/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   reference.conf default settings reference.conf is part of the Vamp code and should not be modified. It contains generic defaults for many parameters, but does not constitute a full Vamp configuration. Environment-specific settings need to be added in in application.conf or using environment variables and/or Java system properties.</description>
    </item>
    
    <item>
      <title>Example configurations</title>
      <link>https://vamp.io/documentation/configure/v0.9.3/example-configurations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.3/example-configurations/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   reference.conf default settings reference.conf files are part of the Vamp code and should not be modified. They contains generic defaults for many parameters, but does not constitute a full Vamp configuration. Environment-specific settings need to be added in in application.conf or using environment variables and/or Java system properties.</description>
    </item>
    
    <item>
      <title>Example configurations</title>
      <link>https://vamp.io/documentation/configure/v0.9.4/example-configurations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.4/example-configurations/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   reference.conf default settings reference.conf files are part of the Vamp code and should not be modified. They contains generic defaults for many parameters, but does not constitute a full Vamp configuration. Environment-specific settings need to be added in in application.conf or using environment variables and/or Java system properties.</description>
    </item>
    
    <item>
      <title>Example configurations</title>
      <link>https://vamp.io/documentation/configure/v0.9.5/example-configurations/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.5/example-configurations/</guid>
      <description>reference.conf default settings reference.conf files are part of the Vamp code and should not be modified. They contains generic defaults for many parameters, but do not constitute a full Vamp configuration. Environment-specific settings need to be added in in application.conf or using environment variables and/or Java system properties.
The Vamp reference.conf file can be found in the Vamp project repo (github.com/magneticio - Vamp reference.conf). For links to vendor-specific reference.conf files, see the Vamp configuration reference</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-gateways/</guid>
      <description>Read about using gateways.
Methods  List - return a list of all gateways Get - get a single gateway Create - create a new gateway Update - update a gateway Delete - delete a gateway  Gateway resource You can define gateways inline as part of a blueprint, breed or deployment, or create them separately and reference them by name. The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-gateways/</guid>
      <description>Read about using gateways.
Methods  List - return a list of all gateways Get - get a single gateway Create - create a new gateway Update - update a gateway Delete - delete a gateway  Gateway resource You can define gateways inline as part of a blueprint, breed or deployment, or create them separately and reference them by name. The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-gateways/</guid>
      <description>Read about using gateways.
Methods  List - return a list of all gateways Get - get a single gateway Create - create a new gateway Update - update a gateway Delete - delete a gateway  Gateway resource You can define gateways inline as part of a blueprint, breed or deployment, or create them separately and reference them by name. The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-gateways/</guid>
      <description>Read about using gateways.
Methods  List - return a list of all gateways Get - get a single gateway Create - create a new gateway Update - update a gateway Delete - delete a gateway  Gateway resource You can define gateways inline as part of a blueprint, breed or deployment, or create them separately and reference them by name. The resource examples shown below are in YAML format.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/gateways/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Gateways are dynmic runtime entities in the Vamp eco-system. They represent load balancer rules to deployment, cluster and service instances. There are two types of gateways:
 Internal gateways are created automatically for each deployment cluster and updated using the gateway/deployment API External gateways are explicitly declared either in a deployment blueprint or using the gateway API  Example - automatically created gateway The below gateway is for deployment vamp, cluster sava and port port.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/gateways/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Gateways are dynmic runtime entities in the Vamp eco-system. They represent load balancer rules to deployment, cluster and service instances. There are two types of gateways:
 Internal gateways are created automatically for each deployment cluster and updated using the gateway/deployment API External gateways are explicitly declared either in a deployment blueprint or using the gateway API  Example - automatically created gateway The below gateway is for deployment vamp, cluster sava and port port.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/gateways/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Gateways are dynamic runtime entities in the Vamp eco-system. They represent load balancer rules to deployment, cluster and service instances. There are two types of gateways:
 Internal gateways are created automatically for each deployment cluster and updated using the gateway/deployment API External gateways are explicitly declared either in a deployment blueprint or using the gateway API  Example - automatically created gateway The below gateway is for deployment vamp, cluster sava and port port.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/gateways/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Gateways are dynamic runtime entities in the Vamp eco-system defined by ports (incoming) and routes (outgoing). They represent load balancer rules to deployment, cluster and service instances. There are two types of Vamp gateway: Gateways allows for programmable routing.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/gateways/</guid>
      <description>Gateways are dynamic runtime entities in the Vamp eco-system defined by ports (incoming) and routes (outgoing). They represent load balancer rules to deployment, cluster and service instances. There are two types of Vamp gateway: Gateways allows for programmable routing.
 Internal gateways created automatically for each deployment cluster and shared by all services deployed within it. Used to distribute traffic for canary releasing and A/B testing across service variants. External gateways explicitly declared either in a deployment blueprint or using the gateways API.</description>
    </item>
    
    <item>
      <title>Gateways</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/gateways/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/gateways/</guid>
      <description>Gateways are dynamic runtime entities in the Vamp eco-system defined by ports (incoming) and routes (outgoing). They represent load balancer rules to deployment, cluster and service instances. There are two types of Vamp gateway: Gateways allows for programmable routing.
 Internal gateways created automatically for each deployment cluster and shared by all services deployed within it. Used to distribute traffic for canary releasing and A/B testing across service variants. External gateways explicitly declared either in a deployment blueprint or using the gateways API.</description>
    </item>
    
    <item>
      <title>HAProxy</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-haproxy/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-haproxy/</guid>
      <description>Details of Vamp&amp;rsquo;s HAProxy configuration.
Actions  Get - get the HAProxy configuration for a version.  HAProxy config parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.
# HAProxy 1.6, Frontends &amp;amp; Backends managed by Vamp # Virtual hosts frontend virtual_hosts bind 0.0.0.0:80 mode http option httplog log-format {\&amp;quot;ci\&amp;quot;:\&amp;quot;%ci\&amp;quot;,\&amp;quot;cp\&amp;quot;:%cp,\&amp;quot;t\&amp;quot;:\&amp;quot;%t\&amp;quot;,\&amp;quot;ft\&amp;quot;:\&amp;quot;%ft\&amp;quot;,\&amp;quot;b\&amp;quot;:\&amp;quot;%b\&amp;quot;,\&amp;quot;s\&amp;quot;:\&amp;quot;%s\&amp;quot;,\&amp;quot;Tq\&amp;quot;:%Tq,\&amp;quot;Tw\&amp;quot;:%Tw,\&amp;quot;Tc\&amp;quot;:%Tc,\&amp;quot;Tr\&amp;quot;:%Tr,\&amp;quot;Tt\&amp;quot;:%Tt,\&amp;quot;ST\&amp;quot;:%ST,\&amp;quot;B\&amp;quot;:%B,\&amp;quot;CC\&amp;quot;:\&amp;quot;%CC\&amp;quot;,\&amp;quot;CS\&amp;quot;:\&amp;quot;%CS\&amp;quot;,\&amp;quot;tsc\&amp;quot;:\&amp;quot;%tsc\&amp;quot;,\&amp;quot;ac\&amp;quot;:%ac,\&amp;quot;fc\&amp;quot;:%fc,\&amp;quot;bc\&amp;quot;:%bc,\&amp;quot;sc\&amp;quot;:%sc,\&amp;quot;rc\&amp;quot;:%rc,\&amp;quot;sq\&amp;quot;:%sq,\&amp;quot;bq\&amp;quot;:%bq,\&amp;quot;hr\&amp;quot;:\&amp;quot;%hr\&amp;quot;,\&amp;quot;hs\&amp;quot;:\&amp;quot;%hs\&amp;quot;,\&amp;quot;r\&amp;quot;:%{+Q}r} # destination: sava:1.</description>
    </item>
    
    <item>
      <title>HAProxy</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-haproxy/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-haproxy/</guid>
      <description>Details of Vamp&amp;rsquo;s HAProxy configuration.
Actions  Get - get the HAProxy configuration for a version.  HAProxy config parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.
# HAProxy 1.6, Frontends &amp;amp; Backends managed by Vamp # Virtual hosts frontend virtual_hosts bind 0.0.0.0:80 mode http option httplog log-format {\&amp;quot;ci\&amp;quot;:\&amp;quot;%ci\&amp;quot;,\&amp;quot;cp\&amp;quot;:%cp,\&amp;quot;t\&amp;quot;:\&amp;quot;%t\&amp;quot;,\&amp;quot;ft\&amp;quot;:\&amp;quot;%ft\&amp;quot;,\&amp;quot;b\&amp;quot;:\&amp;quot;%b\&amp;quot;,\&amp;quot;s\&amp;quot;:\&amp;quot;%s\&amp;quot;,\&amp;quot;Tq\&amp;quot;:%Tq,\&amp;quot;Tw\&amp;quot;:%Tw,\&amp;quot;Tc\&amp;quot;:%Tc,\&amp;quot;Tr\&amp;quot;:%Tr,\&amp;quot;Tt\&amp;quot;:%Tt,\&amp;quot;ST\&amp;quot;:%ST,\&amp;quot;B\&amp;quot;:%B,\&amp;quot;CC\&amp;quot;:\&amp;quot;%CC\&amp;quot;,\&amp;quot;CS\&amp;quot;:\&amp;quot;%CS\&amp;quot;,\&amp;quot;tsc\&amp;quot;:\&amp;quot;%tsc\&amp;quot;,\&amp;quot;ac\&amp;quot;:%ac,\&amp;quot;fc\&amp;quot;:%fc,\&amp;quot;bc\&amp;quot;:%bc,\&amp;quot;sc\&amp;quot;:%sc,\&amp;quot;rc\&amp;quot;:%rc,\&amp;quot;sq\&amp;quot;:%sq,\&amp;quot;bq\&amp;quot;:%bq,\&amp;quot;hr\&amp;quot;:\&amp;quot;%hr\&amp;quot;,\&amp;quot;hs\&amp;quot;:\&amp;quot;%hs\&amp;quot;,\&amp;quot;r\&amp;quot;:%{+Q}r} # destination: sava:1.</description>
    </item>
    
    <item>
      <title>HAProxy</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-haproxy/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-haproxy/</guid>
      <description>Details of Vamp&amp;rsquo;s HAProxy configuration.
Actions  Get - get the HAProxy configuration for a version.  HAProxy config parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.
# HAProxy 1.6, Frontends &amp;amp; Backends managed by Vamp # Virtual hosts frontend virtual_hosts bind 0.0.0.0:80 mode http option httplog log-format {\&amp;quot;ci\&amp;quot;:\&amp;quot;%ci\&amp;quot;,\&amp;quot;cp\&amp;quot;:%cp,\&amp;quot;t\&amp;quot;:\&amp;quot;%t\&amp;quot;,\&amp;quot;ft\&amp;quot;:\&amp;quot;%ft\&amp;quot;,\&amp;quot;b\&amp;quot;:\&amp;quot;%b\&amp;quot;,\&amp;quot;s\&amp;quot;:\&amp;quot;%s\&amp;quot;,\&amp;quot;Tq\&amp;quot;:%Tq,\&amp;quot;Tw\&amp;quot;:%Tw,\&amp;quot;Tc\&amp;quot;:%Tc,\&amp;quot;Tr\&amp;quot;:%Tr,\&amp;quot;Tt\&amp;quot;:%Tt,\&amp;quot;ST\&amp;quot;:%ST,\&amp;quot;B\&amp;quot;:%B,\&amp;quot;CC\&amp;quot;:\&amp;quot;%CC\&amp;quot;,\&amp;quot;CS\&amp;quot;:\&amp;quot;%CS\&amp;quot;,\&amp;quot;tsc\&amp;quot;:\&amp;quot;%tsc\&amp;quot;,\&amp;quot;ac\&amp;quot;:%ac,\&amp;quot;fc\&amp;quot;:%fc,\&amp;quot;bc\&amp;quot;:%bc,\&amp;quot;sc\&amp;quot;:%sc,\&amp;quot;rc\&amp;quot;:%rc,\&amp;quot;sq\&amp;quot;:%sq,\&amp;quot;bq\&amp;quot;:%bq,\&amp;quot;hr\&amp;quot;:\&amp;quot;%hr\&amp;quot;,\&amp;quot;hs\&amp;quot;:\&amp;quot;%hs\&amp;quot;,\&amp;quot;r\&amp;quot;:%{+Q}r} # destination: sava:1.</description>
    </item>
    
    <item>
      <title>HAProxy</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-haproxy/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-haproxy/</guid>
      <description>Details of Vamp&amp;rsquo;s HAProxy configuration.
Actions  Get - get the HAProxy configuration for a version.  HAProxy config parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.
# HAProxy 1.6, Frontends &amp;amp; Backends managed by Vamp # Virtual hosts frontend virtual_hosts bind 0.0.0.0:80 mode http option httplog log-format {\&amp;quot;ci\&amp;quot;:\&amp;quot;%ci\&amp;quot;,\&amp;quot;cp\&amp;quot;:%cp,\&amp;quot;t\&amp;quot;:\&amp;quot;%t\&amp;quot;,\&amp;quot;ft\&amp;quot;:\&amp;quot;%ft\&amp;quot;,\&amp;quot;b\&amp;quot;:\&amp;quot;%b\&amp;quot;,\&amp;quot;s\&amp;quot;:\&amp;quot;%s\&amp;quot;,\&amp;quot;Tq\&amp;quot;:%Tq,\&amp;quot;Tw\&amp;quot;:%Tw,\&amp;quot;Tc\&amp;quot;:%Tc,\&amp;quot;Tr\&amp;quot;:%Tr,\&amp;quot;Tt\&amp;quot;:%Tt,\&amp;quot;ST\&amp;quot;:%ST,\&amp;quot;B\&amp;quot;:%B,\&amp;quot;CC\&amp;quot;:\&amp;quot;%CC\&amp;quot;,\&amp;quot;CS\&amp;quot;:\&amp;quot;%CS\&amp;quot;,\&amp;quot;tsc\&amp;quot;:\&amp;quot;%tsc\&amp;quot;,\&amp;quot;ac\&amp;quot;:%ac,\&amp;quot;fc\&amp;quot;:%fc,\&amp;quot;bc\&amp;quot;:%bc,\&amp;quot;sc\&amp;quot;:%sc,\&amp;quot;rc\&amp;quot;:%rc,\&amp;quot;sq\&amp;quot;:%sq,\&amp;quot;bq\&amp;quot;:%bq,\&amp;quot;hr\&amp;quot;:\&amp;quot;%hr\&amp;quot;,\&amp;quot;hs\&amp;quot;:\&amp;quot;%hs\&amp;quot;,\&amp;quot;r\&amp;quot;:%{+Q}r} # destination: sava:1.</description>
    </item>
    
    <item>
      <title>Health</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-health/</guid>
      <description>Health is a specific type of Vamp event, calculated by a Vamp workflow and required for the Vamp UI. Health can be defined on gateways and deployment ports and retrieved via the API. Read about using workflows.
Health is returned as a value between 1 and 0, where 1 is 100% healthy.
Health can be defined on gateways and deployment ports and retrieved.:
/api/v1/health/gateways/{gateway} /api/v1/health/gateways/{gateway}/routes/$route /api/v1/health/deployments/{deployment} /api/v1/health/deployments/{deployment}/clusters/{cluster} /api/v1/health/deployments/{deployment}/clusters/{cluster}/services/{service}  </description>
    </item>
    
    <item>
      <title>Health</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-health/</guid>
      <description>Health is a specific type of Vamp event, calculated by a Vamp workflow and required for the Vamp UI. Health can be defined on gateways and deployment ports and retrieved via the API. Read about using workflows.
Health is returned as a value between 1 and 0, where 1 is 100% healthy.
Health can be defined on gateways and deployment ports and retrieved.:
/api/v1/health/gateways/{gateway} /api/v1/health/gateways/{gateway}/routes/$route /api/v1/health/deployments/{deployment} /api/v1/health/deployments/{deployment}/clusters/{cluster} /api/v1/health/deployments/{deployment}/clusters/{cluster}/services/{service}  </description>
    </item>
    
    <item>
      <title>Health</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-health/</guid>
      <description>Health is a specific type of Vamp event, calculated by a Vamp workflow and required for the Vamp UI. Health can be defined on gateways and deployment ports and retrieved via the API. Read about using workflows.
Health is returned as a value between 1 and 0, where 1 is 100% healthy.
Health can be defined on gateways and deployment ports and retrieved.:
/api/v1/health/gateways/{gateway} /api/v1/health/gateways/{gateway}/routes/$route /api/v1/health/deployments/{deployment} /api/v1/health/deployments/{deployment}/clusters/{cluster} /api/v1/health/deployments/{deployment}/clusters/{cluster}/services/{service}  </description>
    </item>
    
    <item>
      <title>Health</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-health/</guid>
      <description>Health is a specific type of Vamp event, calculated by a Vamp workflow and required for the Vamp UI. Health can be defined on gateways and deployment ports and retrieved via the API. Read about using workflows.
Health is returned as a value between 1 and 0, where 1 is 100% healthy.
Health can be defined on gateways and deployment ports and retrieved.:
/api/v1/health/gateways/{gateway} /api/v1/health/gateways/{gateway}/routes/$route /api/v1/health/deployments/{deployment} /api/v1/health/deployments/{deployment}/clusters/{cluster} /api/v1/health/deployments/{deployment}/clusters/{cluster}/services/{service}  </description>
    </item>
    
    <item>
      <title>Health checks</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/health/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp tracks the health of deployed service instances and gateways. The default Vamp health workflow reports health based on a combination of defined health checks and gateway monitoring. Health status is stored in the Elasticsearch index vamp-pulse-health-YYYY-MM-DD and displayed in the Vamp UI.</description>
    </item>
    
    <item>
      <title>Health checks</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/health/</guid>
      <description>Vamp tracks the health of deployed service instances and gateways. The default Vamp health workflow reports health based on a combination of defined health checks and gateway monitoring. Health status is stored in the Elasticsearch index vamp-pulse-health-YYYY-MM-DD and displayed in the Vamp UI. It can also be retrieved directly using the Vamp API health endpoint.
Custom health checks Custom health checks can be added on a service, cluster or breed level:</description>
    </item>
    
    <item>
      <title>Health checks</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/health/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/health/</guid>
      <description>Vamp tracks the health of deployed service instances and gateways. The default Vamp health workflow reports health based on a combination of defined health checks and gateway monitoring. Health status is stored in the Elasticsearch index vamp-pulse-health-YYYY-MM-DD and displayed in the Vamp UI. It can also be retrieved directly using the Vamp API health endpoint.
Custom health checks Custom health checks can be added on a service, cluster or breed level:</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/hello-world/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/hello-world/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   The Vamp hello world setup will run Mesos, Marathon (mesosphere.github.io - Marathon) and Vamp 0.9.2 inside a local Docker container with Vamp&amp;rsquo;s Marathon driver. We will do this in three simple steps (although it&amp;rsquo;s really just one docker run command). You can use the hello world setup to work through the getting started tutorials and try out some of Vamp&amp;rsquo;s core features.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/hello-world/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/hello-world/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   The Vamp hello world setup will run Mesos, Marathon (mesosphere.github.io - Marathon) and Vamp 0.9.3 inside a local Docker container with Vamp&amp;rsquo;s Marathon driver. We will do this in three simple steps (although it&amp;rsquo;s really just one docker run command). You can use the hello world setup to work through the getting started tutorials and try out some of Vamp&amp;rsquo;s core features.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/hello-world/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/hello-world/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Want to give Vamp a go? The hello world setup described below runs Vamp inside a local Docker container - a perfect environment to try out Vamp&amp;rsquo;s core features and work through the Vamp tutorials. Vamp hello world runs Mesos, Marathon (mesosphere.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/hello-world/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/hello-world/</guid>
      <description>Want to give Vamp a go? The hello world setup described below runs Vamp inside a local Docker container - a perfect environment to try out Vamp&amp;rsquo;s core features and work through the Vamp tutorials. Vamp hello world runs Mesos, Marathon (mesosphere.github.io - Marathon) and Vamp 0.9.5 together with Vamp&amp;rsquo;s Marathon driver.
Requirements: At least 8GB of memory
This hello world set up is designed for testing purposes only - it is not production grade.</description>
    </item>
    
    <item>
      <title>How to configure Vamp</title>
      <link>https://vamp.io/documentation/configure/v0.9.2/configure-vamp/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.2/configure-vamp/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp configuration is held in a combination of the Vamp application.conf and reference.conf files following the HOCON file standard (github.com/typesafehub - config). You can override settings in the configuration files using Vamp environment variables or Java/JVM system properties. Vamp configuration is built in layers following this order:</description>
    </item>
    
    <item>
      <title>How to configure Vamp</title>
      <link>https://vamp.io/documentation/configure/v0.9.3/configure-vamp/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.3/configure-vamp/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp configuration is held in a combination of the Vamp application.conf and reference.conf files following the HOCON file standard (github.com/typesafehub - config). You can override settings in the configuration files using Vamp environment variables or Java/JVM system properties, or update the applied configuration at runtime using a key value store.</description>
    </item>
    
    <item>
      <title>How to configure Vamp</title>
      <link>https://vamp.io/documentation/configure/v0.9.4/configure-vamp/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.4/configure-vamp/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp configuration is held in a combination of the Vamp application.conf and reference.conf files following the HOCON file standard (github.com/typesafehub - config). You can override settings in the configuration files using Vamp environment variables or Java/JVM system properties, or update the applied configuration at runtime using a key value store.</description>
    </item>
    
    <item>
      <title>How to configure Vamp</title>
      <link>https://vamp.io/documentation/configure/v0.9.5/configure-vamp/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/configure/v0.9.5/configure-vamp/</guid>
      <description>Vamp configuration is held in a combination of the Vamp application.conf and reference.conf files following the HOCON file standard (github.com/typesafehub - config). You can override settings in the configuration files using Vamp environment variables or Java/JVM system properties, or update the applied configuration at runtime using a key value store. Vamp configuration is built in layers following this order:
 reference.conf files - part of the Vamp code. Contain generic, default settings.</description>
    </item>
    
    <item>
      <title>Info</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-info/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-info/</guid>
      <description>Details of Vamp&amp;rsquo;s JVM environment and runtime status, the configured persistence layer and container driver status can be retrieved from the /info APi endpoint.
Actions  List - returns a full list of all info parameters. Get - explicitly request a specific info section.  Info parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Info</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-info/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-info/</guid>
      <description>Details of Vamp&amp;rsquo;s JVM environment and runtime status, the configured persistence layer and container driver status can be retrieved from the /info APi endpoint.
Actions  List - returns a full list of all info parameters. Get - explicitly request a specific info section.  Info parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Info</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-info/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-info/</guid>
      <description>Details of Vamp&amp;rsquo;s JVM environment and runtime status, the configured persistence layer and container driver status can be retrieved from the /info APi endpoint.
Actions  List - returns a full list of all info parameters. Get - explicitly request a specific info section.  Info parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Info</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-info/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-info/</guid>
      <description>Details of Vamp&amp;rsquo;s JVM environment and runtime status, the configured persistence layer and container driver status can be retrieved from the /info APi endpoint.
Actions  List - returns a full list of all info parameters. Get - explicitly request a specific info section.  Info parameters The example below is in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/overview/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/overview/</guid>
      <description>The information on this page applies to Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Before you get Vamp up and running on your architecture, it is helpful to understand how vamp works and the role of each component and its preferred location in a typical architecture.
If you need help you can find us on Gitter</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/overview/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/overview/</guid>
      <description>The information on this page applies to Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Before you get Vamp up and running on your architecture, it is helpful to understand how vamp works and the role of each component and its preferred location in a typical architecture.
If you need help you can find us on Gitter</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/overview/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/overview/</guid>
      <description>The information on this page applies to Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Before you get Vamp up and running on your architecture, it is helpful to understand how vamp works and the role of each component and its preferred location in a typical architecture.
If you need help you can find us on Gitter</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-metrics/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-metrics/</guid>
      <description> Metrics can be defined on gateways and deployment ports and retrieved via the API. Metrics are calculated using external services such as workflows. Read about using workflows.
/api/v1/metrics/gateways/{gateway}/{metrics} /api/v1/metrics/gateways/{gateway}/routes/$route/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/ports/{port}/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/services/{service}/ports/{port}/{metrics}  Example GET /api/v1/metrics/deployments/sava/clusters/frontend/ports/api/response-time  </description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-metrics/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-metrics/</guid>
      <description> Metrics can be defined on gateways and deployment ports and retrieved via the API. Metrics are calculated using external services such as workflows. Read about using workflows.
/api/v1/metrics/gateways/{gateway}/{metrics} /api/v1/metrics/gateways/{gateway}/routes/$route/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/ports/{port}/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/services/{service}/ports/{port}/{metrics}  Example GET /api/v1/metrics/deployments/sava/clusters/frontend/ports/api/response-time  </description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-metrics/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-metrics/</guid>
      <description> Metrics can be defined on gateways and deployment ports and retrieved via the API. Metrics are calculated using external services such as workflows. Read about using workflows.
/api/v1/metrics/gateways/{gateway}/{metrics} /api/v1/metrics/gateways/{gateway}/routes/$route/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/ports/{port}/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/services/{service}/ports/{port}/{metrics}  Example GET /api/v1/metrics/deployments/sava/clusters/frontend/ports/api/response-time  </description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-metrics/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-metrics/</guid>
      <description> Metrics can be defined on gateways and deployment ports and retrieved via the API. Metrics are calculated using external services such as workflows. Read about using workflows.
/api/v1/metrics/gateways/{gateway}/{metrics} /api/v1/metrics/gateways/{gateway}/routes/$route/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/ports/{port}/{metrics} /api/v1/metrics/deployments/{deployment}/clusters/{cluster}/services/{service}/ports/{port}/{metrics}  Example GET /api/v1/metrics/deployments/sava/clusters/frontend/ports/api/response-time  </description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-reference/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp has one REST API. For details on pagination, and request and response formats see common parameters.
API endpoints and resource descriptions  Artifacts: blueprints, breeds, conditions, escalations, scales, slas Runtime entities: deployments, deployment scales, deployment SLAs, gateways, workflows</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-reference/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp has one REST API. For details on pagination, and request and response formats see common parameters.
For details on formatting Websockets API requests see Vamp API - websockets.
API endpoints and resource descriptions  Artifacts: blueprints, breeds, conditions, escalations, scales, slas Runtime entities: deployments, deployment scales, deployment SLAs, gateways, workflows</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-reference/</guid>
      <description>Vamp has one REST API. For details on pagination, and request and response formats see common parameters.
For details on formatting Websockets API requests see Vamp API - websockets.
API endpoints and resource descriptions  Artifacts: blueprints, breeds, conditions, escalations, scales, slas Runtime entities: deployments, deployment scales, deployment SLAs, gateways, workflows
 Data: events, health, metrics System: info, config, haproxy  Send multiple resources It is possible to POST, PUT or DELETE YAML or JSON documents containing more than one artifact definition.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-reference/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-reference/</guid>
      <description>Vamp has one REST API. For details on pagination, and request and response formats see common parameters.
For details on formatting Websockets API requests see Vamp API - websockets.
API endpoints and resource descriptions  Artifacts: blueprints, breeds, conditions, escalations, scales, slas Runtime entities: deployments, deployment scales, deployment SLAs, gateways, workflows
 Data: events, health, metrics System: info, config, haproxy  Send multiple resources It is possible to POST, PUT or DELETE YAML or JSON documents containing more than one artifact definition.</description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>https://vamp.io/documentation/installation/v0.9.2/rancher/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.2/rancher/</guid>
      <description>This installation will run Vamp together with Consul, Elasticsearch and Logstash on Rancher. (We&amp;rsquo;ll also deploy our demo Sava application to give you something to play around on). Before you begin, it is advisable to try out the official Rancher Quick Start Guide tutorial first (rancher.com - quick start guide).
Note!
Rancher support is still in Alpha.
 Tested against This guide has been tested on Rancher version 1.1.x.</description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>https://vamp.io/documentation/installation/v0.9.3/rancher/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.3/rancher/</guid>
      <description>Note!
Vamp v0.9.3 support coming soon.
Installation instructions for Vamp 0.9.2
 </description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>https://vamp.io/documentation/installation/v0.9.4/rancher/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.4/rancher/</guid>
      <description>Note!
Vamp v0.9.4 support coming soon.
Installation instructions for Vamp v0.9.2
 </description>
    </item>
    
    <item>
      <title>Rancher</title>
      <link>https://vamp.io/documentation/installation/v0.9.5/rancher/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/installation/v0.9.5/rancher/</guid>
      <description>Note!
Vamp v0.9.5 support coming soon.
Installation instructions for Vamp v0.9.2
 </description>
    </item>
    
    <item>
      <title>Referencing artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/references/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/references/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   With any artifact, Vamp allows you to either use an inline notation or reference the artifact by name. For references, you use the reference keyword or its shorter version ref. Think of it like either using actual values or pointers to a value.</description>
    </item>
    
    <item>
      <title>Referencing artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/references/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/references/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   With any artifact, Vamp allows you to either use an inline notation or reference the artifact by name. For references, you use the reference keyword or its shorter version ref. Think of it like either using actual values or pointers to a value.</description>
    </item>
    
    <item>
      <title>Referencing artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/references/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/references/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   With any artifact, Vamp allows you to either use an inline notation or reference the artifact by name. For references, you use the reference keyword or its shorter version ref. Think of it like either using actual values or pointers to a value.</description>
    </item>
    
    <item>
      <title>Referencing artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/references/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/references/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   With any artifact, Vamp allows you to either use an inline notation or reference the artifact by name. For references, you use the reference keyword or its shorter version ref. Think of it like either using actual values or pointers to a value.</description>
    </item>
    
    <item>
      <title>Referencing artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/references/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/references/</guid>
      <description>With any artifact, Vamp allows you to either use an inline notation or reference the artifact by name. For references, you use the reference keyword or its shorter version ref. Think of it like either using actual values or pointers to a value. This has a big impact on how complex or simple you can make any blueprint, breed or deployment. It also impacts how much knowledge you need to have of all the different artifacts that are used in a typical deployment or blueprint.</description>
    </item>
    
    <item>
      <title>Referencing artifacts</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/references/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/references/</guid>
      <description>With any artifact, Vamp allows you to either use an inline notation or reference the artifact by name. For references, you use the reference keyword or its shorter version ref. Think of it like either using actual values or pointers to a value. This has a big impact on how complex or simple you can make any blueprint, breed or deployment. It also impacts how much knowledge you need to have of all the different artifacts that are used in a typical deployment or blueprint.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.2/requirements/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.2/requirements/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp&amp;rsquo;s components work together with elements in your architecture to handle orchetstration, routing, persistence and metrics aggregation. To achieve this, Vamp requires access to a container scheduler, key value store, Elastic Search and HAProxy.
Container scheduler (orchestration) Vamp talks directly to your choice of container scheduler.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.3/requirements/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.3/requirements/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp&amp;rsquo;s components work together with elements in your architecture to handle orchetstration, routing, persistence and metrics aggregation. To achieve this, Vamp requires access to a container scheduler, key value store, Elastic Search and HAProxy.
Container scheduler (orchestration) Vamp talks directly to your choice of container scheduler.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.4/requirements/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.4/requirements/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp&amp;rsquo;s components work together with elements in your architecture to handle orchetstration, routing, persistence and metrics aggregation. To achieve this, Vamp requires access to a container scheduler, key value store, Elastic Search and HAProxy.
Container scheduler (orchestration) Vamp talks directly to your choice of container scheduler.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.5/requirements/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.5/requirements/</guid>
      <description>Vamp&amp;rsquo;s components work together with elements in your architecture to handle orchestration, routing, persistence and metrics aggregation. To achieve this, Vamp requires access to a container scheduler, key value store, a relational database (optionally), Elastic Search and HAProxy (Vamp packages this is our Vamp Gateway Agent container).
Container scheduler (orchestration) Vamp talks directly to your choice of container scheduler. Currently we support Mesos/Marathon, DC/OS and Kubernetes. (NB Vamp is also know to work with Rancher and single-machine Docker, but these are not tested against the latest version yet.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://vamp.io/documentation/how-vamp-works/v1.0.0/requirements/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v1.0.0/requirements/</guid>
      <description>Vamp requires access to a container scheduler (Kubernetes or DC/OS), a secure key-value store, a SQL database, and Elasticsearch.
Container scheduler Kubernetes Vamp supports Kubernetes 1.9.x and 1.10.x. Supoort for Kubernetes 1.11.x is currently in beta.
Vamp has been tested with:
 Amazon Elastic Container Service for Kubernetes (EKS) Azure Kubernetes Service (AKS) Google Cloud Kubernetes Engine (GKE)  DC/OS Vamp supports DC/OS and DC/OS Enterprise 1.9.x and later. Supoort for DC/OS 1.</description>
    </item>
    
    <item>
      <title>Routing and load balancing</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.2/routing-and-load-balancing/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.2/routing-and-load-balancing/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses the tried and tested HAProxy reverse proxy software for routing/proxying and load balancing (haproxy.com). Vamp Gateway Agent (VGA) manages the HAProxy configuration and HAProxy routes incoming traffic to endpoints (explicitly defined external gateways) or handles intra-service routing. By applying some iptables magic, Vamp makes sure that HAProxy configuration updates won&amp;rsquo;t introduce dropped packages.</description>
    </item>
    
    <item>
      <title>Routing and load balancing</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.3/routing-and-load-balancing/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.3/routing-and-load-balancing/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses the tried and tested HAProxy reverse proxy software for routing/proxying and load balancing (haproxy.com). Vamp Gateway Agent (VGA) manages the HAProxy configuration and HAProxy routes incoming traffic to endpoints (explicitly defined external gateways) or handles intra-service routing. By applying some iptables magic, Vamp makes sure that HAProxy configuration updates won&amp;rsquo;t introduce dropped packages.</description>
    </item>
    
    <item>
      <title>Routing and load balancing</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.4/routing-and-load-balancing/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.4/routing-and-load-balancing/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses the tried and tested HAProxy reverse proxy software for routing/proxying and load balancing (haproxy.com). Vamp Gateway Agent (VGA) manages the HAProxy configuration and HAProxy routes incoming traffic to endpoints (explicitly defined external gateways) or handles intra-service routing. By applying some iptables magic, Vamp makes sure that HAProxy configuration updates won&amp;rsquo;t introduce dropped packages.</description>
    </item>
    
    <item>
      <title>Routing and load balancing</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.5/routing-and-loadbalancing/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.5/routing-and-loadbalancing/</guid>
      <description>Routing, load balancing and also service discovery are big topics for container platforms and so it is for Vamp. We&amp;rsquo;ve split the topic into the following parts, but if anything is missing our your setup is different please don&amp;rsquo;t hesitate to reach out using one of the support channels.
1. Components 2. Example topologies 3. Load balancing 4. Routing 5. Service discovery 6. Virtual hosting 7. Performance
Components A typical Vamp installation on for example DC/OS or Kubernetes consists of the following routing related components:</description>
    </item>
    
    <item>
      <title>SLA (Service Level Agreement)</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/sla/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/sla/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   SLA stands for &amp;ldquo;Service Level Agreement&amp;rdquo;. Vamp uses it to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. In essence, an SLA and its associated escalation is a workflow that is checked and controlled by Vamp based on the runtime behaviour of a service.</description>
    </item>
    
    <item>
      <title>SLA (Service Level Agreement)</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/sla/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/sla/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   SLA stands for &amp;ldquo;Service Level Agreement&amp;rdquo;. Vamp uses it to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. In essence, an SLA and its associated escalation is a workflow that is checked and controlled by Vamp based on the runtime behaviour of a service.</description>
    </item>
    
    <item>
      <title>SLA (Service Level Agreement)</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/sla/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/sla/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   SLA stands for &amp;ldquo;Service Level Agreement&amp;rdquo;. Vamp uses it to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. In essence, an SLA and its associated escalation is a workflow that is checked and controlled by Vamp based on the runtime behaviour of a service.</description>
    </item>
    
    <item>
      <title>SLA (Service Level Agreement)</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/sla/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/sla/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   SLA stands for &amp;ldquo;Service Level Agreement&amp;rdquo;. Vamp uses it to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. In essence, an SLA and its associated escalation is a workflow that is checked and controlled by Vamp based on the runtime behaviour of a service.</description>
    </item>
    
    <item>
      <title>SLA (Service Level Agreement)</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/sla/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/sla/</guid>
      <description>SLA stands for &amp;ldquo;Service Level Agreement&amp;rdquo;. Vamp uses it to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. In essence, an SLA and its associated escalation is a workflow that is checked and controlled by Vamp based on the runtime behaviour of a service. SLAs and escalations are defined with the VAMP DSL.
The SLA event system You can define an SLA for each cluster in a blueprint.</description>
    </item>
    
    <item>
      <title>SLA (Service Level Agreement)</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/sla/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/sla/</guid>
      <description>SLA stands for &amp;ldquo;Service Level Agreement&amp;rdquo;. Vamp uses it to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. In essence, an SLA and its associated escalation is a workflow that is checked and controlled by Vamp based on the runtime behaviour of a service. SLAs and escalations are defined with the VAMP DSL.
The SLA event system You can define an SLA for each cluster in a blueprint.</description>
    </item>
    
    <item>
      <title>SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-slas/</guid>
      <description>SLAs (Service Level Aggreemets) can be used to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. You can save and manage SLA templates through the API, these can then be referenced in a blueprint or deployment. Read about using SLAs.
Actions  List - return a list of all SLAs Get - get a single SLA Create - create a new SLA Update - update a SLA Delete - delete a SLA  SLA resource You can define SLAs inline or store them separately under a unique name and reference them from a blueprintor deployment resource.</description>
    </item>
    
    <item>
      <title>SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-slas/</guid>
      <description>SLAs (Service Level Aggreemets) can be used to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. You can save and manage SLA templates through the API, these can then be referenced in a blueprint or deployment. Read about using SLAs.
Actions  List - return a list of all SLAs Get - get a single SLA Create - create a new SLA Update - update a SLA Delete - delete a SLA  SLA resource You can define SLAs inline or store them separately under a unique name and reference them from a blueprintor deployment resource.</description>
    </item>
    
    <item>
      <title>SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-slas/</guid>
      <description>SLAs (Service Level Aggreemets) can be used to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. You can save and manage SLA templates through the API, these can then be referenced in a blueprint or deployment. Read about using SLAs.
Actions  List - return a list of all SLAs Get - get a single SLA Create - create a new SLA Update - update a SLA Delete - delete a SLA  SLA resource You can define SLAs inline or store them separately under a unique name and reference them from a blueprintor deployment resource.</description>
    </item>
    
    <item>
      <title>SLAs</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-slas/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-slas/</guid>
      <description>SLAs (Service Level Aggreemets) can be used to define a pre-described set of boundaries to a service and the actions that should take place once the service crosses those boundaries. You can save and manage SLA templates through the API, these can then be referenced in a blueprint or deployment. Read about using SLAs.
Actions  List - return a list of all SLAs Get - get a single SLA Create - create a new SLA Update - update a SLA Delete - delete a SLA  SLA resource You can define SLAs inline or store them separately under a unique name and reference them from a blueprintor deployment resource.</description>
    </item>
    
    <item>
      <title>Scales</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-scales/</guid>
      <description>Read about using scales.
Actions  List - return a list of all stored scales Get - get a single stored scale Create - create a new scale Update - update a stored scale Delete - delete a stored scale  Scale resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Scales</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-scales/</guid>
      <description>Read about using scales.
Actions  List - return a list of all stored scales Get - get a single stored scale Create - create a new scale Update - update a stored scale Delete - delete a stored scale  Scale resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Scales</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-scales/</guid>
      <description>Read about using scales.
Actions  List - return a list of all stored scales Get - get a single stored scale Create - create a new scale Update - update a stored scale Delete - delete a stored scale  Scale resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Scales</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-scales/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-scales/</guid>
      <description>Read about using scales.
Actions  List - return a list of all stored scales Get - get a single stored scale Create - create a new scale Update - update a stored scale Delete - delete a stored scale  Scale resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.2/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.2/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.3/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.3/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.4/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.4/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/service-discovery/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/service-discovery/</guid>
      <description>Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.io - service registry).
For Vamp, we recognise the following benefits of this pattern:
 No code injection needed. No extra libraries or agents needed.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/service-discovery/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/service-discovery/</guid>
      <description>Vamp uses a service discovery pattern called server-side service discovery, which allows for service discovery without the need to change your code or run any other daemon or agent (microservices.io - server side discovery). In addition to service discovery, Vamp also functions as a service registry (microservices.io - service registry).
For Vamp, we recognise the following benefits of this pattern:
 No code injection needed. No extra libraries or agents needed.</description>
    </item>
    
    <item>
      <title>Sticky Sessions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/sticky-sessions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/sticky-sessions/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp supports route and instance level sticky sessions.
Route Level A common use case is when the end users have to have the same experience in A/B testing setup thus they should get the same service always (either A or B).</description>
    </item>
    
    <item>
      <title>Sticky Sessions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/sticky-sessions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/sticky-sessions/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp supports route and instance level sticky sessions.
Route Level A common use case is when the end users have to have the same experience in A/B testing setup thus they should get the same service always (either A or B).</description>
    </item>
    
    <item>
      <title>Sticky Sessions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/sticky-sessions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/sticky-sessions/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp supports route and instance level sticky sessions.
Route Level A common use case is when the end users have to have the same experience in A/B testing setup thus they should get the same service always (either A or B).</description>
    </item>
    
    <item>
      <title>Sticky Sessions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/sticky-sessions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/sticky-sessions/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Gateways can optionally be set as sticky on either a route or instance level.
 Route level
Use when end users should always have the same experience, for example A/B testing service variants. Instance level
Use when end users need to be served by the same instance, for example a stateful application.</description>
    </item>
    
    <item>
      <title>Sticky Sessions</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/sticky-sessions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/sticky-sessions/</guid>
      <description>Gateways can optionally be set as sticky on either a route or instance level.
 Route level Use when end users should always have the same experience, for example A/B testing service variants. Instance level Use when end users need to be served by the same instance, for example a stateful application.  Vamp sticky sessions are managed using cookies. Traffic routed through a gateway set as sticky will receive a cookie with the unique hash for the route or instance served.</description>
    </item>
    
    <item>
      <title>Sticky Sessions</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/sticky-sessions/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/sticky-sessions/</guid>
      <description>Gateways can optionally be set as sticky on either a route or instance level.
 Route level Use when end users should always have the same experience, for example A/B testing service variants. Instance level Use when end users need to be served by the same instance, for example a stateful application.  Vamp sticky sessions are managed using cookies. Traffic routed through a gateway set as sticky will receive a cookie with the unique hash for the route or instance served.</description>
    </item>
    
    <item>
      <title>Using the Vamp CLI</title>
      <link>https://vamp.io/documentation/cli/using-the-cli/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/cli/using-the-cli/</guid>
      <description>Installation Vamp CLI EE is a Node.js package. Install it globally and export the host address of your Vamp installation via VAMP_HOST.
npm install -g vamp-cli-ee export VAMP_HOST=http://vamp-host vamp --help  You will need to authenticate and provide the correct namespace to further use the CLI
Tokens &amp;amp; Namespaces To use the CLI, you need have an API token and set the correct namespace.
 API token: can be set by export VAMP_TOKEN=&amp;lt;token uuid&amp;gt; or as an CLI argument --token &amp;lt;token uuid&amp;gt; Namespace: can be set by export VAMP_NAMESPACE=&amp;lt;namespace uuid&amp;gt; or as an CLI argument --namespace &amp;lt;namespace uuid&amp;gt;  Logging in as a non admin If you do not have the access rights to create a token, your Vamp admin should provide you with one.</description>
    </item>
    
    <item>
      <title>VGA</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-vga/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-vga/</guid>
      <description>You can retrieve Vamp gateway driver marshaller configurations and templates using the Vamp API.
Actions  Get configuration - view the current VGA configuration for a specified marshaller Get template - view a stored configuration template Update template - update a stored configuration template  Get configuration Return the current VGA configuration for the specified marshaller.
Request  GET api/v1/vga/{type}/{name}/configuration
for example GET &amp;lt;vamp url&amp;gt;/api/v1/vga/haproxy/1.7/configuration The request body should be empty.</description>
    </item>
    
    <item>
      <title>VGA</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-vga/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-vga/</guid>
      <description>You can retrieve Vamp gateway driver marshaller configurations and templates using the Vamp API.
Actions  Get configuration - view the current VGA configuration for a specified marshaller Get template - view a stored configuration template Update template - update a stored configuration template  Get configuration Return the current VGA configuration for the specified marshaller.
Request  GET api/v1/vga/{type}/{name}/configuration
for example GET &amp;lt;vamp url&amp;gt;/api/v1/vga/haproxy/1.7/configuration The request body should be empty.</description>
    </item>
    
    <item>
      <title>VGA</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-vga/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-vga/</guid>
      <description>You can retrieve Vamp gateway driver marshaller configurations and templates using the Vamp API.
Actions  Get configuration - view the current VGA configuration for a specified marshaller Get template - view a stored configuration template Update template - update a stored configuration template  Get configuration Return the current VGA configuration for the specified marshaller.
Request  GET api/v1/vga/{type}/{name}/configuration
for example GET &amp;lt;vamp url&amp;gt;/api/v1/vga/haproxy/1.7/configuration The request body should be empty.</description>
    </item>
    
    <item>
      <title>Virtual Hosts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/virtual-hosts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/virtual-hosts/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can be configured to support virtual host via HAProxy:
vamp.operation.gateway { virtual-hosts = true virtual-hosts-domain = &amp;quot;vamp&amp;quot; }  Example - Virtual hosts PUT ${VAMP_URL}/api/v1/deployments/runner with body:
--- name: runner gateways: 9070: runner1/port 9080: runner2/port clusters: runner1: services: breed: name: http:1.</description>
    </item>
    
    <item>
      <title>Virtual Hosts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/virtual-hosts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/virtual-hosts/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can be configured to support virtual host via HAProxy:
vamp.operation.gateway { virtual-hosts = true virtual-hosts-domain = &amp;quot;vamp&amp;quot; }  Example - Virtual hosts PUT ${VAMP_URL}/api/v1/deployments/runner with body:
--- name: runner gateways: 9070: runner1/port 9080: runner2/port clusters: runner1: services: breed: name: http:1.</description>
    </item>
    
    <item>
      <title>Virtual Hosts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/virtual-hosts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/virtual-hosts/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can be configured to support virtual host via HAProxy:
vamp.operation.gateway { virtual-hosts = true virtual-hosts-domain = &amp;quot;vamp&amp;quot; }  Example - Virtual hosts PUT ${VAMP_URL}/api/v1/deployments/runner with body:
--- name: runner gateways: 9070: runner1/port 9080: runner2/port clusters: runner1: services: breed: name: http:1.</description>
    </item>
    
    <item>
      <title>Virtual Hosts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/virtual-hosts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/virtual-hosts/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can be configured to support virtual host via HAProxy:
vamp.operation.gateway { virtual-hosts = true virtual-hosts-domain = &amp;quot;vamp&amp;quot; }  Example - Virtual hosts PUT ${VAMP_URL}/api/v1/deployments/runner with body:
--- name: runner gateways: 9070: runner1/port 9080: runner2/port clusters: runner1: services: breed: name: http:1.</description>
    </item>
    
    <item>
      <title>Virtual Hosts</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/virtual-hosts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/virtual-hosts/</guid>
      <description>Vamp can leverage the virtual hosting offered by HAproxy to support serving multiple endpoints on for example port 80 and port 443. This mostly comes in handy when you are offering public (internet) facing services where adding a port number to a URL is not an option.
Enabling Virtual Hosts To enable the use of virtual hosts you need to configure the following options in the Vamp configuration. The option virtual-hosts-domain functions as the TLD and can be anything you like.</description>
    </item>
    
    <item>
      <title>Virtual Hosts</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/virtual-hosts/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/virtual-hosts/</guid>
      <description>Vamp can leverage the virtual hosting offered by HAproxy to support serving multiple endpoints on for example port 80 and port 443. This mostly comes in handy when you are offering public (internet) facing services where adding a port number to a URL is not an option.
Enabling Virtual Hosts To enable the use of virtual hosts you need to configure the following options in the Vamp configuration. The option virtual-hosts-domain functions as the TLD and can be anything you like.</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-websockets/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-websockets/</guid>
      <description>WebSocket API requests and responses are transmitted as text messages containing both meta-information and a payload.
 WebSocket API requests Websocket API responses  WebSocket API requests REST API requests can be mapped 1-on-1 to WebSocket API requests using the properties described below. Note that all enum (symbolic) values like Json, Peek etc. are case-insensitive. The Vamp API accepts requests in JSON or YAML.
Example - excplicitly request gateway driver info  REST API request: GET /api/v1/info?</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-websockets/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-websockets/</guid>
      <description>WebSocket API requests and responses are transmitted as text messages containing both meta-information and a payload.
 WebSocket API requests Websocket API responses  WebSocket API requests REST API requests can be mapped 1-on-1 to WebSocket API requests using the properties described below. Note that all enum (symbolic) values like Json, Peek etc. are case-insensitive. The Vamp API accepts requests in JSON or YAML.
Example - excplicitly request gateway driver info  REST API request: GET /api/v1/info?</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-websockets/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-websockets/</guid>
      <description>WebSocket API requests and responses are transmitted as text messages containing both meta-information and a payload.
 WebSocket API requests Websocket API responses  WebSocket API requests REST API requests can be mapped 1-on-1 to WebSocket API requests using the properties described below. Note that all enum (symbolic) values like Json, Peek etc. are case-insensitive. The Vamp API accepts requests in JSON or YAML.
Example - excplicitly request gateway driver info  REST API request: GET /api/v1/info?</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-websockets/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-websockets/</guid>
      <description>WebSocket API requests and responses are transmitted as text messages containing both meta-information and a payload.
 WebSocket API requests Websocket API responses  WebSocket API requests REST API requests can be mapped 1-on-1 to WebSocket API requests using the properties described below. Note that all enum (symbolic) values like Json, Peek etc. are case-insensitive. The Vamp API accepts requests in JSON or YAML.
Example - excplicitly request gateway driver info  REST API request: GET /api/v1/info?</description>
    </item>
    
    <item>
      <title>Which container scheduler?</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.2/which-container-scheduler/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.2/which-container-scheduler/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can run on top of Mesos/Marathon, DC/OS, Kubernetes and Rancher (Docker Swarm support is coming soon). In case you’re “greenfield” and don’t have anything selected or running yet, here are some high-level pointers to help you make an informed decision:</description>
    </item>
    
    <item>
      <title>Which container scheduler?</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.3/which-container-scheduler/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.3/which-container-scheduler/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can run on top of Mesos/Marathon, DC/OS, Kubernetes and Rancher (Docker Swarm support is coming soon). In case you’re “greenfield” and don’t have anything selected or running yet, here are some high-level pointers to help you make an informed decision:</description>
    </item>
    
    <item>
      <title>Which container scheduler?</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.4/which-container-scheduler/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.4/which-container-scheduler/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can run on top of Mesos/Marathon, DC/OS, Kubernetes and Rancher (Docker Swarm support is coming soon). In case you’re “greenfield” and don’t have anything selected or running yet, here are some high-level pointers to help you make an informed decision:</description>
    </item>
    
    <item>
      <title>Which container scheduler?</title>
      <link>https://vamp.io/documentation/how-vamp-works/v0.9.5/which-container-scheduler/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/how-vamp-works/v0.9.5/which-container-scheduler/</guid>
      <description>Vamp can run on top of Mesos/Marathon, DC/OS, Kubernetes and Rancher (Docker Swarm support is coming soon). In case you’re “greenfield” and don’t have anything selected or running yet, here are some high-level pointers to help you make an informed decision:
 Working with big data - Mesos/Marathon, DC/OS, Azure Container Service Running web-based applications - Kubernetes, Google Container Engine Managing (virtual) infrastructure - Rancher with Docker or Kubernetes Just running Docker  Whichever option you choose now, Vamp is container systems agnostic, so all your blueprints and workflows will keep on working if you decide to switch in the future *.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/api/v0.9.2/api-workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.2/api-workflows/</guid>
      <description>Read about using workflows.
Actions  List - return a list of all workflows Get - get a single workflow Create - create a new workflow Update - update a workflow Delete - delete a workflow  Workflow resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/api/v0.9.3/api-workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.3/api-workflows/</guid>
      <description>Read about using workflows.
Actions  List - return a list of all workflows Get - get a single workflow Create - create a new workflow Update - update a workflow Delete - delete a workflow  Workflow resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/api/v0.9.4/api-workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.4/api-workflows/</guid>
      <description>Read about using workflows.
Actions  List - return a list of all workflows Get - get a single workflow Get status - get status of a single workflow Create - create a new workflow Update - update a workflow Set status - set status of a single workflow Delete - delete a workflow  Workflow resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/api/v0.9.5/api-workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/api/v0.9.5/api-workflows/</guid>
      <description>Read about using workflows.
Actions  List - return a list of all workflows Get - get a single workflow Get status - get status of a single workflow Create - create a new workflow Update - update a workflow Set status - set status of a single workflow Delete - delete a workflow  Workflow resource The resource examples shown below are in YAML format. Vamp API requests and responses can be in JSON (default) or YAML format, see common parameters for details on how to set this.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.1/workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.1/workflows/</guid>
      <description>The information on this page is written for Vamp v0.9.1
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   A &amp;ldquo;workflow&amp;rdquo; is an automated change of the running system and its deployments and gateways. Changing the number of running instances based on metrics (e.g. SLA) is an example of a workflow. A workflow can be seen as a recipe or solution, however it has a more generic meaning not just related to &amp;ldquo;problematic&amp;rdquo; situations.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.2/workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.2/workflows/</guid>
      <description>The information on this page is written for Vamp v0.9.2
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp workflows are a convenient way to run Node JS based scripts that access the Vamp API to monitor and interact with running services. JavaScript workflows run in Vamp workflow agent containers (github.com/magneticio - Vamp workflow agent) and are managed just like any other container inside your cluster, making them robust, scalable and dynamic.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.3/workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.3/workflows/</guid>
      <description>The information on this page is written for Vamp v0.9.3
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp workflows are a convenient way to run Node JS based scripts that access the Vamp API to monitor and interact with running services. JavaScript workflows run in Vamp workflow agent containers (github.com/magneticio - Vamp workflow agent) and are managed just like any other container inside your cluster, making them robust, scalable and dynamic.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/workflows/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp workflows are a convenient way to run Node JS based scripts that access the Vamp API to monitor and interact with running services. JavaScript workflows run in Vamp workflow agent containers (github.com/magneticio - Vamp workflow agent) and are managed just like any other container inside your cluster, making them robust, scalable and dynamic.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/workflows/</guid>
      <description>Vamp workflows are a convenient way to run Node JS based scripts that access the Vamp API to monitor and interact with running services. JavaScript workflows run in Vamp workflow agent containers (github.com/magneticio - Vamp workflow agent) and are managed just like any other container inside your cluster, making them robust, scalable and dynamic. Workflows can be scheduled to run as a daemon, be triggered by Vamp events or to run at specified times.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/workflows/</link>
      <pubDate>Tue, 13 Sep 2016 09:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/workflows/</guid>
      <description>Vamp workflows are a convenient way to run Node JS based scripts that access the Vamp API to monitor and interact with running services. JavaScript workflows run in Vamp workflow agent containers (github.com/magneticio - Vamp workflow agent) and are managed just like any other container inside your cluster, making them robust, scalable and dynamic. Workflows can be scheduled to run as a daemon, be triggered by Vamp events or to run at specified times.</description>
    </item>
    
    <item>
      <title>Reverse proxy</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.4/reverse-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.4/reverse-proxy/</guid>
      <description>The information on this page is written for Vamp v0.9.4
 Switch to the latest version of this page. Read the release notes for the latest Vamp release.   Vamp can function as a reverse proxy to access elements inside the cluster and not visible outside the cluster. This is useful as it allows direct access to e.g. Mesos logs from within the Vamp UI and enables workflows to access details Vamp may be unaware of.</description>
    </item>
    
    <item>
      <title>Reverse proxy</title>
      <link>https://vamp.io/documentation/using-vamp/v0.9.5/reverse-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v0.9.5/reverse-proxy/</guid>
      <description>Vamp can function as a reverse proxy to access elements inside the cluster and not visible outside the cluster. This is useful as it allows direct access to e.g. Mesos logs from within the Vamp UI and enables workflows to access details Vamp may be unaware of.
Reverse proxy access is available through the Vamp API (HTTP &amp;amp; WebSocket) and used by the Vamp UI to display logs, deployment instances and gateways.</description>
    </item>
    
    <item>
      <title>Reverse proxy</title>
      <link>https://vamp.io/documentation/using-vamp/v1.0.0/reverse-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vamp.io/documentation/using-vamp/v1.0.0/reverse-proxy/</guid>
      <description>Vamp can function as a reverse proxy to access elements inside the cluster and not visible outside the cluster. This is useful as it allows direct access to e.g. Mesos logs from within the Vamp UI and enables workflows to access details Vamp may be unaware of.
Reverse proxy access is available through the Vamp API (HTTP &amp;amp; WebSocket) and used by the Vamp UI to display logs, deployment instances and gateways.</description>
    </item>
    
  </channel>
</rss>